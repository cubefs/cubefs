// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/scheduler/client (interfaces: IClusterManager)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockClusterManager is a mock of IClusterManager interface.
type MockClusterManager struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerMockRecorder
}

// MockClusterManagerMockRecorder is the mock recorder for MockClusterManager.
type MockClusterManagerMockRecorder struct {
	mock *MockClusterManager
}

// NewMockClusterManager creates a new mock instance.
func NewMockClusterManager(ctrl *gomock.Controller) *MockClusterManager {
	mock := &MockClusterManager{ctrl: ctrl}
	mock.recorder = &MockClusterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManager) EXPECT() *MockClusterManagerMockRecorder {
	return m.recorder
}

// AllocShardUnit mocks base method.
func (m *MockClusterManager) AllocShardUnit(arg0 context.Context, arg1 *clustermgr.AllocShardUnitArgs) (*clustermgr.AllocShardUnitRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocShardUnit", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.AllocShardUnitRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocShardUnit indicates an expected call of AllocShardUnit.
func (mr *MockClusterManagerMockRecorder) AllocShardUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocShardUnit", reflect.TypeOf((*MockClusterManager)(nil).AllocShardUnit), arg0, arg1)
}

// AllocVolumeUnit mocks base method.
func (m *MockClusterManager) AllocVolumeUnit(arg0 context.Context, arg1 *clustermgr.AllocVolumeUnitArgs) (*clustermgr.AllocVolumeUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocVolumeUnit", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.AllocVolumeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocVolumeUnit indicates an expected call of AllocVolumeUnit.
func (mr *MockClusterManagerMockRecorder) AllocVolumeUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocVolumeUnit", reflect.TypeOf((*MockClusterManager)(nil).AllocVolumeUnit), arg0, arg1)
}

// DeleteKV mocks base method.
func (m *MockClusterManager) DeleteKV(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKV", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKV indicates an expected call of DeleteKV.
func (mr *MockClusterManagerMockRecorder) DeleteKV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKV", reflect.TypeOf((*MockClusterManager)(nil).DeleteKV), arg0, arg1)
}

// DiskInfo mocks base method.
func (m *MockClusterManager) DiskInfo(arg0 context.Context, arg1 proto.DiskID) (*clustermgr.BlobNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.BlobNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskInfo indicates an expected call of DiskInfo.
func (mr *MockClusterManagerMockRecorder) DiskInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskInfo", reflect.TypeOf((*MockClusterManager)(nil).DiskInfo), arg0, arg1)
}

// DroppedDisk mocks base method.
func (m *MockClusterManager) DroppedDisk(arg0 context.Context, arg1 proto.DiskID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroppedDisk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DroppedDisk indicates an expected call of DroppedDisk.
func (mr *MockClusterManagerMockRecorder) DroppedDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroppedDisk", reflect.TypeOf((*MockClusterManager)(nil).DroppedDisk), arg0, arg1)
}

// GetConfig mocks base method.
func (m *MockClusterManager) GetConfig(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClusterManagerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClusterManager)(nil).GetConfig), arg0, arg1)
}

// GetKV mocks base method.
func (m *MockClusterManager) GetKV(arg0 context.Context, arg1 string) (clustermgr.GetKvRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKV", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.GetKvRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKV indicates an expected call of GetKV.
func (mr *MockClusterManagerMockRecorder) GetKV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKV", reflect.TypeOf((*MockClusterManager)(nil).GetKV), arg0, arg1)
}

// GetService mocks base method.
func (m *MockClusterManager) GetService(arg0 context.Context, arg1 clustermgr.GetServiceArgs) (clustermgr.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockClusterManagerMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClusterManager)(nil).GetService), arg0, arg1)
}

// GetShardInfo mocks base method.
func (m *MockClusterManager) GetShardInfo(arg0 context.Context, arg1 *clustermgr.GetShardArgs) (*clustermgr.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardInfo indicates an expected call of GetShardInfo.
func (mr *MockClusterManagerMockRecorder) GetShardInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardInfo", reflect.TypeOf((*MockClusterManager)(nil).GetShardInfo), arg0, arg1)
}

// GetVolumeInfo mocks base method.
func (m *MockClusterManager) GetVolumeInfo(arg0 context.Context, arg1 *clustermgr.GetVolumeArgs) (*clustermgr.VolumeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.VolumeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInfo indicates an expected call of GetVolumeInfo.
func (mr *MockClusterManagerMockRecorder) GetVolumeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInfo", reflect.TypeOf((*MockClusterManager)(nil).GetVolumeInfo), arg0, arg1)
}

// ListDisk mocks base method.
func (m *MockClusterManager) ListDisk(arg0 context.Context, arg1 *clustermgr.ListOptionArgs) (clustermgr.ListDiskRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisk", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ListDiskRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisk indicates an expected call of ListDisk.
func (mr *MockClusterManagerMockRecorder) ListDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisk", reflect.TypeOf((*MockClusterManager)(nil).ListDisk), arg0, arg1)
}

// ListDroppingDisk mocks base method.
func (m *MockClusterManager) ListDroppingDisk(arg0 context.Context) ([]*clustermgr.BlobNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDroppingDisk", arg0)
	ret0, _ := ret[0].([]*clustermgr.BlobNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDroppingDisk indicates an expected call of ListDroppingDisk.
func (mr *MockClusterManagerMockRecorder) ListDroppingDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDroppingDisk", reflect.TypeOf((*MockClusterManager)(nil).ListDroppingDisk), arg0)
}

// ListKV mocks base method.
func (m *MockClusterManager) ListKV(arg0 context.Context, arg1 *clustermgr.ListKvOpts) (clustermgr.ListKvRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKV", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ListKvRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKV indicates an expected call of ListKV.
func (mr *MockClusterManagerMockRecorder) ListKV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKV", reflect.TypeOf((*MockClusterManager)(nil).ListKV), arg0, arg1)
}

// ListShardNodeDisk mocks base method.
func (m *MockClusterManager) ListShardNodeDisk(arg0 context.Context, arg1 *clustermgr.ListOptionArgs) (clustermgr.ListShardNodeDiskRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShardNodeDisk", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ListShardNodeDiskRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShardNodeDisk indicates an expected call of ListShardNodeDisk.
func (mr *MockClusterManagerMockRecorder) ListShardNodeDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShardNodeDisk", reflect.TypeOf((*MockClusterManager)(nil).ListShardNodeDisk), arg0, arg1)
}

// ListShardUnit mocks base method.
func (m *MockClusterManager) ListShardUnit(arg0 context.Context, arg1 *clustermgr.ListShardUnitArgs) ([]clustermgr.ShardUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShardUnit", arg0, arg1)
	ret0, _ := ret[0].([]clustermgr.ShardUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShardUnit indicates an expected call of ListShardUnit.
func (mr *MockClusterManagerMockRecorder) ListShardUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShardUnit", reflect.TypeOf((*MockClusterManager)(nil).ListShardUnit), arg0, arg1)
}

// ListVolume mocks base method.
func (m *MockClusterManager) ListVolume(arg0 context.Context, arg1 *clustermgr.ListVolumeArgs) (clustermgr.ListVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolume", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ListVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolume indicates an expected call of ListVolume.
func (mr *MockClusterManagerMockRecorder) ListVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolume", reflect.TypeOf((*MockClusterManager)(nil).ListVolume), arg0, arg1)
}

// ListVolumeUnit mocks base method.
func (m *MockClusterManager) ListVolumeUnit(arg0 context.Context, arg1 *clustermgr.ListVolumeUnitArgs) ([]*clustermgr.VolumeUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeUnit", arg0, arg1)
	ret0, _ := ret[0].([]*clustermgr.VolumeUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeUnit indicates an expected call of ListVolumeUnit.
func (mr *MockClusterManagerMockRecorder) ListVolumeUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeUnit", reflect.TypeOf((*MockClusterManager)(nil).ListVolumeUnit), arg0, arg1)
}

// LockVolume mocks base method.
func (m *MockClusterManager) LockVolume(arg0 context.Context, arg1 *clustermgr.LockVolumeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockVolume indicates an expected call of LockVolume.
func (mr *MockClusterManagerMockRecorder) LockVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockVolume", reflect.TypeOf((*MockClusterManager)(nil).LockVolume), arg0, arg1)
}

// RegisterService mocks base method.
func (m *MockClusterManager) RegisterService(arg0 context.Context, arg1 clustermgr.ServiceNode, arg2, arg3, arg4 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockClusterManagerMockRecorder) RegisterService(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockClusterManager)(nil).RegisterService), arg0, arg1, arg2, arg3, arg4)
}

// ReleaseVolumeUnit mocks base method.
func (m *MockClusterManager) ReleaseVolumeUnit(arg0 context.Context, arg1 *clustermgr.ReleaseVolumeUnitArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseVolumeUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseVolumeUnit indicates an expected call of ReleaseVolumeUnit.
func (mr *MockClusterManagerMockRecorder) ReleaseVolumeUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseVolumeUnit", reflect.TypeOf((*MockClusterManager)(nil).ReleaseVolumeUnit), arg0, arg1)
}

// SetConfig mocks base method.
func (m *MockClusterManager) SetConfig(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockClusterManagerMockRecorder) SetConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockClusterManager)(nil).SetConfig), arg0, arg1, arg2)
}

// SetDisk mocks base method.
func (m *MockClusterManager) SetDisk(arg0 context.Context, arg1 proto.DiskID, arg2 proto.DiskStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDisk", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDisk indicates an expected call of SetDisk.
func (mr *MockClusterManagerMockRecorder) SetDisk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDisk", reflect.TypeOf((*MockClusterManager)(nil).SetDisk), arg0, arg1, arg2)
}

// SetKV mocks base method.
func (m *MockClusterManager) SetKV(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKV", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKV indicates an expected call of SetKV.
func (mr *MockClusterManagerMockRecorder) SetKV(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKV", reflect.TypeOf((*MockClusterManager)(nil).SetKV), arg0, arg1, arg2)
}

// SetShardNodeDisk mocks base method.
func (m *MockClusterManager) SetShardNodeDisk(arg0 context.Context, arg1 proto.DiskID, arg2 proto.DiskStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShardNodeDisk", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShardNodeDisk indicates an expected call of SetShardNodeDisk.
func (mr *MockClusterManagerMockRecorder) SetShardNodeDisk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShardNodeDisk", reflect.TypeOf((*MockClusterManager)(nil).SetShardNodeDisk), arg0, arg1, arg2)
}

// ShardNodeDiskInfo mocks base method.
func (m *MockClusterManager) ShardNodeDiskInfo(arg0 context.Context, arg1 proto.DiskID) (*clustermgr.ShardNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardNodeDiskInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.ShardNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardNodeDiskInfo indicates an expected call of ShardNodeDiskInfo.
func (mr *MockClusterManagerMockRecorder) ShardNodeDiskInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardNodeDiskInfo", reflect.TypeOf((*MockClusterManager)(nil).ShardNodeDiskInfo), arg0, arg1)
}

// UnlockVolume mocks base method.
func (m *MockClusterManager) UnlockVolume(arg0 context.Context, arg1 *clustermgr.UnlockVolumeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockVolume indicates an expected call of UnlockVolume.
func (mr *MockClusterManagerMockRecorder) UnlockVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockVolume", reflect.TypeOf((*MockClusterManager)(nil).UnlockVolume), arg0, arg1)
}

// UpdateShard mocks base method.
func (m *MockClusterManager) UpdateShard(arg0 context.Context, arg1 *clustermgr.UpdateShardArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShard indicates an expected call of UpdateShard.
func (mr *MockClusterManagerMockRecorder) UpdateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShard", reflect.TypeOf((*MockClusterManager)(nil).UpdateShard), arg0, arg1)
}

// UpdateVolume mocks base method.
func (m *MockClusterManager) UpdateVolume(arg0 context.Context, arg1 *clustermgr.UpdateVolumeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockClusterManagerMockRecorder) UpdateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockClusterManager)(nil).UpdateVolume), arg0, arg1)
}
