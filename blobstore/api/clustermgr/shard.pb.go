// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shard.proto

package clustermgr

import (
	fmt "fmt"
	github_com_cubefs_cubefs_blobstore_common_proto "github.com/cubefs/cubefs/blobstore/common/proto"
	sharding "github.com/cubefs/cubefs/blobstore/common/sharding"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Shard struct {
	ShardID              github_com_cubefs_cubefs_blobstore_common_proto.ShardID      `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"shard_id,omitempty"`
	AppliedIndex         uint64                                                       `protobuf:"varint,2,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	LeaderDiskID         github_com_cubefs_cubefs_blobstore_common_proto.DiskID       `protobuf:"varint,3,opt,name=leader_disk_id,json=leaderDiskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"leader_disk_id,omitempty"`
	Range                sharding.Range                                               `protobuf:"bytes,4,opt,name=range,proto3" json:"range"`
	Units                []ShardUnit                                                  `protobuf:"bytes,5,rep,name=units,proto3" json:"units"`
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion `protobuf:"varint,6,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{0}
}
func (m *Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return m.Size()
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetShardID() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Shard) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *Shard) GetLeaderDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.LeaderDiskID
	}
	return 0
}

func (m *Shard) GetRange() sharding.Range {
	if m != nil {
		return m.Range
	}
	return sharding.Range{}
}

func (m *Shard) GetUnits() []ShardUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *Shard) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

type ShardUnit struct {
	Suid                 github_com_cubefs_cubefs_blobstore_common_proto.Suid   `protobuf:"varint,1,opt,name=suid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"suid,omitempty"`
	DiskID               github_com_cubefs_cubefs_blobstore_common_proto.DiskID `protobuf:"varint,2,opt,name=disk_id,json=diskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"disk_id,omitempty"`
	Learner              bool                                                   `protobuf:"varint,3,opt,name=learner,proto3" json:"learner,omitempty"`
	Host                 string                                                 `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *ShardUnit) Reset()         { *m = ShardUnit{} }
func (m *ShardUnit) String() string { return proto.CompactTextString(m) }
func (*ShardUnit) ProtoMessage()    {}
func (*ShardUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{1}
}
func (m *ShardUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardUnit.Merge(m, src)
}
func (m *ShardUnit) XXX_Size() int {
	return m.Size()
}
func (m *ShardUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardUnit.DiscardUnknown(m)
}

var xxx_messageInfo_ShardUnit proto.InternalMessageInfo

func (m *ShardUnit) GetSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *ShardUnit) GetDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.DiskID
	}
	return 0
}

func (m *ShardUnit) GetLearner() bool {
	if m != nil {
		return m.Learner
	}
	return false
}

func (m *ShardUnit) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ShardUnitInfo struct {
	Suid                 github_com_cubefs_cubefs_blobstore_common_proto.Suid            `protobuf:"varint,1,opt,name=suid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"suid,omitempty"`
	DiskID               github_com_cubefs_cubefs_blobstore_common_proto.DiskID          `protobuf:"varint,2,opt,name=disk_id,json=diskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"disk_id,omitempty"`
	AppliedIndex         uint64                                                          `protobuf:"varint,3,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	LeaderDiskID         github_com_cubefs_cubefs_blobstore_common_proto.DiskID          `protobuf:"varint,4,opt,name=leader_disk_id,json=leaderDiskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"leader_disk_id,omitempty"`
	Range                sharding.Range                                                  `protobuf:"bytes,5,opt,name=range,proto3" json:"range"`
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion    `protobuf:"varint,6,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	Host                 string                                                          `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	Learner              bool                                                            `protobuf:"varint,8,opt,name=learner,proto3" json:"learner,omitempty"`
	Status               github_com_cubefs_cubefs_blobstore_common_proto.ShardUnitStatus `protobuf:"varint,9,opt,name=status,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardUnitStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *ShardUnitInfo) Reset()         { *m = ShardUnitInfo{} }
func (m *ShardUnitInfo) String() string { return proto.CompactTextString(m) }
func (*ShardUnitInfo) ProtoMessage()    {}
func (*ShardUnitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{2}
}
func (m *ShardUnitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardUnitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardUnitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardUnitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardUnitInfo.Merge(m, src)
}
func (m *ShardUnitInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShardUnitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardUnitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShardUnitInfo proto.InternalMessageInfo

func (m *ShardUnitInfo) GetSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *ShardUnitInfo) GetDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.DiskID
	}
	return 0
}

func (m *ShardUnitInfo) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *ShardUnitInfo) GetLeaderDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.LeaderDiskID
	}
	return 0
}

func (m *ShardUnitInfo) GetRange() sharding.Range {
	if m != nil {
		return m.Range
	}
	return sharding.Range{}
}

func (m *ShardUnitInfo) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *ShardUnitInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ShardUnitInfo) GetLearner() bool {
	if m != nil {
		return m.Learner
	}
	return false
}

func (m *ShardUnitInfo) GetStatus() github_com_cubefs_cubefs_blobstore_common_proto.ShardUnitStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

type ShardTask struct {
	TaskType             github_com_cubefs_cubefs_blobstore_common_proto.ShardTaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardTaskType" json:"task_type,omitempty"`
	DiskID               github_com_cubefs_cubefs_blobstore_common_proto.DiskID        `protobuf:"varint,2,opt,name=disk_id,json=diskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"disk_id,omitempty"`
	Suid                 github_com_cubefs_cubefs_blobstore_common_proto.Suid          `protobuf:"varint,3,opt,name=suid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"suid,omitempty"`
	OldRouteVersion      github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion  `protobuf:"varint,4,opt,name=old_route_version,json=oldRouteVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"old_route_version,omitempty"`
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion  `protobuf:"varint,5,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *ShardTask) Reset()         { *m = ShardTask{} }
func (m *ShardTask) String() string { return proto.CompactTextString(m) }
func (*ShardTask) ProtoMessage()    {}
func (*ShardTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{3}
}
func (m *ShardTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardTask.Merge(m, src)
}
func (m *ShardTask) XXX_Size() int {
	return m.Size()
}
func (m *ShardTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardTask.DiscardUnknown(m)
}

var xxx_messageInfo_ShardTask proto.InternalMessageInfo

func (m *ShardTask) GetTaskType() github_com_cubefs_cubefs_blobstore_common_proto.ShardTaskType {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *ShardTask) GetDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.DiskID
	}
	return 0
}

func (m *ShardTask) GetSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *ShardTask) GetOldRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.OldRouteVersion
	}
	return 0
}

func (m *ShardTask) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

type ShardReportArgs struct {
	Shards               []ShardUnitInfo `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShardReportArgs) Reset()         { *m = ShardReportArgs{} }
func (m *ShardReportArgs) String() string { return proto.CompactTextString(m) }
func (*ShardReportArgs) ProtoMessage()    {}
func (*ShardReportArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{4}
}
func (m *ShardReportArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardReportArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardReportArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardReportArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReportArgs.Merge(m, src)
}
func (m *ShardReportArgs) XXX_Size() int {
	return m.Size()
}
func (m *ShardReportArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReportArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReportArgs proto.InternalMessageInfo

func (m *ShardReportArgs) GetShards() []ShardUnitInfo {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ShardReportRet struct {
	ShardTasks           []ShardTask `protobuf:"bytes,1,rep,name=shard_tasks,json=shardTasks,proto3" json:"shard_tasks"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ShardReportRet) Reset()         { *m = ShardReportRet{} }
func (m *ShardReportRet) String() string { return proto.CompactTextString(m) }
func (*ShardReportRet) ProtoMessage()    {}
func (*ShardReportRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{5}
}
func (m *ShardReportRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardReportRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardReportRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardReportRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReportRet.Merge(m, src)
}
func (m *ShardReportRet) XXX_Size() int {
	return m.Size()
}
func (m *ShardReportRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReportRet.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReportRet proto.InternalMessageInfo

func (m *ShardReportRet) GetShardTasks() []ShardTask {
	if m != nil {
		return m.ShardTasks
	}
	return nil
}

type AllocShardUnitArgs struct {
	Suid                 github_com_cubefs_cubefs_blobstore_common_proto.Suid `protobuf:"varint,1,opt,name=suid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"suid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *AllocShardUnitArgs) Reset()         { *m = AllocShardUnitArgs{} }
func (m *AllocShardUnitArgs) String() string { return proto.CompactTextString(m) }
func (*AllocShardUnitArgs) ProtoMessage()    {}
func (*AllocShardUnitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{6}
}
func (m *AllocShardUnitArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocShardUnitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocShardUnitArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocShardUnitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocShardUnitArgs.Merge(m, src)
}
func (m *AllocShardUnitArgs) XXX_Size() int {
	return m.Size()
}
func (m *AllocShardUnitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocShardUnitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AllocShardUnitArgs proto.InternalMessageInfo

func (m *AllocShardUnitArgs) GetSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.Suid
	}
	return 0
}

type AllocShardUnitRet struct {
	Suid                 github_com_cubefs_cubefs_blobstore_common_proto.Suid   `protobuf:"varint,1,opt,name=suid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"suid,omitempty"`
	DiskID               github_com_cubefs_cubefs_blobstore_common_proto.DiskID `protobuf:"varint,2,opt,name=disk_id,json=diskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"disk_id,omitempty"`
	Host                 string                                                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *AllocShardUnitRet) Reset()         { *m = AllocShardUnitRet{} }
func (m *AllocShardUnitRet) String() string { return proto.CompactTextString(m) }
func (*AllocShardUnitRet) ProtoMessage()    {}
func (*AllocShardUnitRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{7}
}
func (m *AllocShardUnitRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocShardUnitRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocShardUnitRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocShardUnitRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocShardUnitRet.Merge(m, src)
}
func (m *AllocShardUnitRet) XXX_Size() int {
	return m.Size()
}
func (m *AllocShardUnitRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocShardUnitRet.DiscardUnknown(m)
}

var xxx_messageInfo_AllocShardUnitRet proto.InternalMessageInfo

func (m *AllocShardUnitRet) GetSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *AllocShardUnitRet) GetDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.DiskID
	}
	return 0
}

func (m *AllocShardUnitRet) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type UpdateShardArgs struct {
	NewSuid              github_com_cubefs_cubefs_blobstore_common_proto.Suid   `protobuf:"varint,1,opt,name=new_suid,json=newSuid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"new_suid,omitempty"`
	NewDiskID            github_com_cubefs_cubefs_blobstore_common_proto.DiskID `protobuf:"varint,2,opt,name=new_disk_id,json=newDiskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"new_disk_id,omitempty"`
	NewIsLeaner          bool                                                   `protobuf:"varint,3,opt,name=new_is_leaner,json=newIsLeaner,proto3" json:"new_is_leaner,omitempty"`
	OldSuid              github_com_cubefs_cubefs_blobstore_common_proto.Suid   `protobuf:"varint,4,opt,name=old_suid,json=oldSuid,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.Suid" json:"old_suid,omitempty"`
	OldIsLeaner          bool                                                   `protobuf:"varint,5,opt,name=old_is_leaner,json=oldIsLeaner,proto3" json:"old_is_leaner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *UpdateShardArgs) Reset()         { *m = UpdateShardArgs{} }
func (m *UpdateShardArgs) String() string { return proto.CompactTextString(m) }
func (*UpdateShardArgs) ProtoMessage()    {}
func (*UpdateShardArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{8}
}
func (m *UpdateShardArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateShardArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateShardArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateShardArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateShardArgs.Merge(m, src)
}
func (m *UpdateShardArgs) XXX_Size() int {
	return m.Size()
}
func (m *UpdateShardArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateShardArgs.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateShardArgs proto.InternalMessageInfo

func (m *UpdateShardArgs) GetNewSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.NewSuid
	}
	return 0
}

func (m *UpdateShardArgs) GetNewDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.NewDiskID
	}
	return 0
}

func (m *UpdateShardArgs) GetNewIsLeaner() bool {
	if m != nil {
		return m.NewIsLeaner
	}
	return false
}

func (m *UpdateShardArgs) GetOldSuid() github_com_cubefs_cubefs_blobstore_common_proto.Suid {
	if m != nil {
		return m.OldSuid
	}
	return 0
}

func (m *UpdateShardArgs) GetOldIsLeaner() bool {
	if m != nil {
		return m.OldIsLeaner
	}
	return false
}

type GetShardArgs struct {
	ShardID              github_com_cubefs_cubefs_blobstore_common_proto.ShardID `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"shard_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *GetShardArgs) Reset()         { *m = GetShardArgs{} }
func (m *GetShardArgs) String() string { return proto.CompactTextString(m) }
func (*GetShardArgs) ProtoMessage()    {}
func (*GetShardArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{9}
}
func (m *GetShardArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShardArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShardArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShardArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShardArgs.Merge(m, src)
}
func (m *GetShardArgs) XXX_Size() int {
	return m.Size()
}
func (m *GetShardArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShardArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetShardArgs proto.InternalMessageInfo

func (m *GetShardArgs) GetShardID() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.ShardID
	}
	return 0
}

type ListShardUnitArgs struct {
	DiskID               github_com_cubefs_cubefs_blobstore_common_proto.DiskID `protobuf:"varint,1,opt,name=disk_id,json=diskId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.DiskID" json:"disk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *ListShardUnitArgs) Reset()         { *m = ListShardUnitArgs{} }
func (m *ListShardUnitArgs) String() string { return proto.CompactTextString(m) }
func (*ListShardUnitArgs) ProtoMessage()    {}
func (*ListShardUnitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{10}
}
func (m *ListShardUnitArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListShardUnitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListShardUnitArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListShardUnitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListShardUnitArgs.Merge(m, src)
}
func (m *ListShardUnitArgs) XXX_Size() int {
	return m.Size()
}
func (m *ListShardUnitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListShardUnitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ListShardUnitArgs proto.InternalMessageInfo

func (m *ListShardUnitArgs) GetDiskID() github_com_cubefs_cubefs_blobstore_common_proto.DiskID {
	if m != nil {
		return m.DiskID
	}
	return 0
}

type ListShardUnitRet struct {
	ShardUnitInfos       []ShardUnitInfo `protobuf:"bytes,1,rep,name=shard_unit_infos,json=shardUnitInfos,proto3" json:"shard_unit_infos"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListShardUnitRet) Reset()         { *m = ListShardUnitRet{} }
func (m *ListShardUnitRet) String() string { return proto.CompactTextString(m) }
func (*ListShardUnitRet) ProtoMessage()    {}
func (*ListShardUnitRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{11}
}
func (m *ListShardUnitRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListShardUnitRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListShardUnitRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListShardUnitRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListShardUnitRet.Merge(m, src)
}
func (m *ListShardUnitRet) XXX_Size() int {
	return m.Size()
}
func (m *ListShardUnitRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ListShardUnitRet.DiscardUnknown(m)
}

var xxx_messageInfo_ListShardUnitRet proto.InternalMessageInfo

func (m *ListShardUnitRet) GetShardUnitInfos() []ShardUnitInfo {
	if m != nil {
		return m.ShardUnitInfos
	}
	return nil
}

type ListShardArgs struct {
	Marker               github_com_cubefs_cubefs_blobstore_common_proto.ShardID `protobuf:"varint,1,opt,name=marker,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"marker,omitempty"`
	Count                uint32                                                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *ListShardArgs) Reset()         { *m = ListShardArgs{} }
func (m *ListShardArgs) String() string { return proto.CompactTextString(m) }
func (*ListShardArgs) ProtoMessage()    {}
func (*ListShardArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{12}
}
func (m *ListShardArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListShardArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListShardArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListShardArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListShardArgs.Merge(m, src)
}
func (m *ListShardArgs) XXX_Size() int {
	return m.Size()
}
func (m *ListShardArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListShardArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ListShardArgs proto.InternalMessageInfo

func (m *ListShardArgs) GetMarker() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.Marker
	}
	return 0
}

func (m *ListShardArgs) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListShardRet struct {
	Shards               []Shard                                                 `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards"`
	Marker               github_com_cubefs_cubefs_blobstore_common_proto.ShardID `protobuf:"varint,2,opt,name=marker,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"marker,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *ListShardRet) Reset()         { *m = ListShardRet{} }
func (m *ListShardRet) String() string { return proto.CompactTextString(m) }
func (*ListShardRet) ProtoMessage()    {}
func (*ListShardRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{13}
}
func (m *ListShardRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListShardRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListShardRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListShardRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListShardRet.Merge(m, src)
}
func (m *ListShardRet) XXX_Size() int {
	return m.Size()
}
func (m *ListShardRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ListShardRet.DiscardUnknown(m)
}

var xxx_messageInfo_ListShardRet proto.InternalMessageInfo

func (m *ListShardRet) GetShards() []Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *ListShardRet) GetMarker() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.Marker
	}
	return 0
}

type AdminUpdateShardUnitArgs struct {
	Epoch                uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NextEpoch            uint32 `protobuf:"varint,2,opt,name=next_epoch,json=nextEpoch,proto3" json:"next_epoch,omitempty"`
	ShardUnitInfo        `protobuf:"bytes,3,opt,name=unit_info,json=unitInfo,proto3,embedded=unit_info" json:"unit_info"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminUpdateShardUnitArgs) Reset()         { *m = AdminUpdateShardUnitArgs{} }
func (m *AdminUpdateShardUnitArgs) String() string { return proto.CompactTextString(m) }
func (*AdminUpdateShardUnitArgs) ProtoMessage()    {}
func (*AdminUpdateShardUnitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_319ea41e44cdc364, []int{14}
}
func (m *AdminUpdateShardUnitArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminUpdateShardUnitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminUpdateShardUnitArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminUpdateShardUnitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminUpdateShardUnitArgs.Merge(m, src)
}
func (m *AdminUpdateShardUnitArgs) XXX_Size() int {
	return m.Size()
}
func (m *AdminUpdateShardUnitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminUpdateShardUnitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AdminUpdateShardUnitArgs proto.InternalMessageInfo

func (m *AdminUpdateShardUnitArgs) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AdminUpdateShardUnitArgs) GetNextEpoch() uint32 {
	if m != nil {
		return m.NextEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*Shard)(nil), "cubefs.blobstore.api.clustermgr.Shard")
	proto.RegisterType((*ShardUnit)(nil), "cubefs.blobstore.api.clustermgr.ShardUnit")
	proto.RegisterType((*ShardUnitInfo)(nil), "cubefs.blobstore.api.clustermgr.ShardUnitInfo")
	proto.RegisterType((*ShardTask)(nil), "cubefs.blobstore.api.clustermgr.ShardTask")
	proto.RegisterType((*ShardReportArgs)(nil), "cubefs.blobstore.api.clustermgr.ShardReportArgs")
	proto.RegisterType((*ShardReportRet)(nil), "cubefs.blobstore.api.clustermgr.ShardReportRet")
	proto.RegisterType((*AllocShardUnitArgs)(nil), "cubefs.blobstore.api.clustermgr.AllocShardUnitArgs")
	proto.RegisterType((*AllocShardUnitRet)(nil), "cubefs.blobstore.api.clustermgr.AllocShardUnitRet")
	proto.RegisterType((*UpdateShardArgs)(nil), "cubefs.blobstore.api.clustermgr.UpdateShardArgs")
	proto.RegisterType((*GetShardArgs)(nil), "cubefs.blobstore.api.clustermgr.GetShardArgs")
	proto.RegisterType((*ListShardUnitArgs)(nil), "cubefs.blobstore.api.clustermgr.ListShardUnitArgs")
	proto.RegisterType((*ListShardUnitRet)(nil), "cubefs.blobstore.api.clustermgr.ListShardUnitRet")
	proto.RegisterType((*ListShardArgs)(nil), "cubefs.blobstore.api.clustermgr.ListShardArgs")
	proto.RegisterType((*ListShardRet)(nil), "cubefs.blobstore.api.clustermgr.ListShardRet")
	proto.RegisterType((*AdminUpdateShardUnitArgs)(nil), "cubefs.blobstore.api.clustermgr.AdminUpdateShardUnitArgs")
}

func init() { proto.RegisterFile("shard.proto", fileDescriptor_319ea41e44cdc364) }

var fileDescriptor_319ea41e44cdc364 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0xc6, 0x89, 0x3d, 0x3f, 0x95, 0x99, 0x64, 0xd3, 0xca, 0x61, 0xb4, 0x88, 0x38, 0x32, 0x12,
	0x44, 0x08, 0x79, 0xa4, 0x05, 0x01, 0xd2, 0x82, 0xd8, 0x64, 0xc3, 0xae, 0x06, 0x05, 0x24, 0x9c,
	0x84, 0x03, 0x08, 0x2c, 0xcf, 0x74, 0x67, 0xe2, 0x1d, 0x8f, 0xdb, 0x74, 0xb7, 0xc9, 0x2e, 0x37,
	0x5e, 0x81, 0x87, 0x40, 0xe2, 0x4d, 0xf6, 0xb8, 0x0f, 0x80, 0x2c, 0xe4, 0x33, 0xe2, 0xc6, 0x65,
	0x4e, 0xa8, 0xbb, 0x6d, 0x8f, 0x87, 0x08, 0x91, 0x64, 0x92, 0x95, 0xf6, 0xe6, 0xae, 0xee, 0xfa,
	0xaa, 0xbf, 0xaa, 0xaf, 0xaa, 0x0d, 0x6b, 0xfc, 0x2c, 0x60, 0xd8, 0x4d, 0x18, 0x15, 0x14, 0xd9,
	0xa3, 0x74, 0x48, 0x4e, 0xb9, 0x3b, 0x8c, 0xe8, 0x90, 0x0b, 0xca, 0x88, 0x1b, 0x24, 0xa1, 0x3b,
	0x8a, 0x52, 0x2e, 0x08, 0x9b, 0x8e, 0xd9, 0xdd, 0xad, 0x31, 0x1d, 0x53, 0x75, 0xb6, 0x2f, 0xbf,
	0xb4, 0xdb, 0xdd, 0x77, 0xb5, 0x5b, 0xbf, 0x72, 0xeb, 0x8f, 0xe8, 0x74, 0x4a, 0xe3, 0xbe, 0xc2,
	0x0e, 0xe3, 0x71, 0x9f, 0x05, 0xf1, 0x98, 0xe8, 0xd3, 0xce, 0xdf, 0xab, 0x60, 0x1d, 0xc9, 0x0d,
	0x14, 0x40, 0x4b, 0x9d, 0xf0, 0x43, 0xdc, 0x33, 0x76, 0x8c, 0xdd, 0xee, 0xfe, 0xa3, 0x3c, 0xb3,
	0x9b, 0x6a, 0x73, 0x70, 0x30, 0xcb, 0xec, 0x0f, 0xc7, 0xa1, 0x38, 0x4b, 0x87, 0xee, 0x88, 0x4e,
	0xfb, 0x45, 0x8c, 0xff, 0x0a, 0xa5, 0xb0, 0xdd, 0xc2, 0xd5, 0x6b, 0x2a, 0xdc, 0x01, 0x46, 0x6f,
	0x42, 0x37, 0x48, 0x92, 0x28, 0x24, 0xd8, 0x0f, 0x63, 0x4c, 0x9e, 0xf6, 0x56, 0x76, 0x8c, 0x5d,
	0xd3, 0xeb, 0x14, 0xc6, 0x81, 0xb4, 0xa1, 0x04, 0xd6, 0x23, 0x12, 0x60, 0xc2, 0x7c, 0x1c, 0xf2,
	0x89, 0xbc, 0xcd, 0xaa, 0xba, 0xcd, 0xe7, 0x79, 0x66, 0x77, 0x0e, 0xd5, 0xce, 0x41, 0xc8, 0x27,
	0xea, 0x4a, 0x1f, 0x5c, 0xf5, 0x4a, 0xda, 0xd3, 0xeb, 0x44, 0x73, 0x1c, 0x8c, 0x1e, 0x82, 0xa5,
	0x52, 0xd2, 0x33, 0x77, 0x8c, 0xdd, 0xb5, 0x7b, 0x6f, 0xbb, 0x17, 0x12, 0xaf, 0x31, 0xdc, 0x32,
	0x83, 0xae, 0x27, 0x8f, 0xef, 0x9b, 0xcf, 0x33, 0xfb, 0x35, 0x4f, 0xfb, 0xa2, 0x47, 0x60, 0xa5,
	0x71, 0x28, 0x78, 0xcf, 0xda, 0x59, 0xdd, 0x5d, 0xbb, 0xf7, 0x8e, 0xfb, 0x3f, 0xd5, 0xd3, 0xd9,
	0x39, 0x89, 0x43, 0x51, 0xe2, 0x28, 0x77, 0x44, 0xa0, 0xcb, 0x68, 0x2a, 0x88, 0xff, 0x23, 0x61,
	0x3c, 0xa4, 0x71, 0xaf, 0x21, 0x73, 0xb4, 0xff, 0x60, 0x96, 0xd9, 0x1f, 0x5f, 0x95, 0xad, 0x27,
	0x81, 0xbe, 0xd6, 0x38, 0x5e, 0x87, 0xd5, 0x56, 0xce, 0x5f, 0x06, 0xb4, 0xab, 0x1b, 0xa0, 0x63,
	0x30, 0x79, 0x5a, 0xd4, 0xdd, 0xdc, 0x7f, 0x90, 0x67, 0xb6, 0x79, 0x94, 0x86, 0x78, 0x96, 0xd9,
	0xef, 0x5f, 0xb9, 0xe8, 0x69, 0x88, 0x3d, 0x85, 0x86, 0xbe, 0x83, 0x66, 0x59, 0xc2, 0x15, 0x55,
	0xc2, 0x83, 0x3c, 0xb3, 0x1b, 0x4b, 0x17, 0xaf, 0x81, 0x75, 0xd9, 0x7a, 0xd0, 0x8c, 0x48, 0xc0,
	0x62, 0xc2, 0x94, 0x42, 0x5a, 0x5e, 0xb9, 0x44, 0x08, 0xcc, 0x33, 0xca, 0x85, 0xaa, 0x67, 0xdb,
	0x53, 0xdf, 0xce, 0x2f, 0x16, 0x74, 0x2b, 0xc2, 0x83, 0xf8, 0x94, 0xbe, 0x9a, 0xa4, 0x2f, 0xb4,
	0xd0, 0xea, 0xa5, 0x5a, 0xc8, 0x7c, 0x59, 0x2d, 0x64, 0x2d, 0xd1, 0x42, 0x2f, 0x47, 0xfa, 0x95,
	0x3a, 0x9a, 0x73, 0x75, 0xd4, 0xb5, 0xd4, 0x5a, 0xd4, 0xd2, 0xb7, 0xd0, 0xe0, 0x22, 0x10, 0x29,
	0xef, 0xb5, 0x55, 0x0e, 0x1f, 0xce, 0x32, 0xfb, 0xd3, 0x6b, 0x4d, 0x42, 0x29, 0xbc, 0x23, 0x05,
	0xe5, 0x15, 0x90, 0xce, 0xcf, 0x66, 0xd1, 0x85, 0xc7, 0x01, 0x9f, 0xa0, 0x27, 0xd0, 0x16, 0x01,
	0x9f, 0xf8, 0xe2, 0x59, 0x42, 0x8a, 0x11, 0xfc, 0x45, 0x9e, 0xd9, 0x2d, 0xb9, 0x79, 0xfc, 0x2c,
	0x21, 0xb3, 0xcc, 0xfe, 0xe4, 0x5a, 0x91, 0x4b, 0x00, 0xaf, 0x25, 0x8a, 0xaf, 0xdb, 0x96, 0x69,
	0xd9, 0x5b, 0x7a, 0x74, 0xdf, 0x54, 0x6f, 0x45, 0xb0, 0x49, 0x23, 0xec, 0x2f, 0x8a, 0xc4, 0xbc,
	0x21, 0x91, 0x6c, 0xd0, 0x08, 0xd7, 0x0d, 0x17, 0xe5, 0x68, 0xdd, 0xca, 0x24, 0xf6, 0x61, 0x43,
	0x15, 0xc9, 0x23, 0x09, 0x65, 0x62, 0x8f, 0x8d, 0x39, 0x3a, 0x84, 0x86, 0xea, 0x13, 0xde, 0x33,
	0xd4, 0x63, 0xe2, 0x5e, 0xfe, 0x31, 0x91, 0x93, 0xad, 0xe8, 0xaa, 0x02, 0xc3, 0x19, 0xc1, 0x7a,
	0x2d, 0x80, 0x47, 0x04, 0xfa, 0xaa, 0xf8, 0xd1, 0xf0, 0xa5, 0x1c, 0xca, 0x20, 0x97, 0x7c, 0xb1,
	0xa4, 0x96, 0x8a, 0x00, 0xc0, 0x4b, 0x03, 0x77, 0x9e, 0x00, 0xda, 0x8b, 0x22, 0x3a, 0xaa, 0x2e,
	0xa2, 0x88, 0xdc, 0xca, 0x88, 0x75, 0x7e, 0x37, 0x60, 0x73, 0x31, 0x98, 0x24, 0xf5, 0x4a, 0x8e,
	0xf3, 0x72, 0x16, 0xad, 0xd6, 0x5e, 0xaa, 0x3f, 0x57, 0x60, 0xe3, 0x24, 0xc1, 0x81, 0x20, 0x8a,
	0x9f, 0x4a, 0xe4, 0x11, 0xb4, 0x62, 0x72, 0xee, 0xd7, 0x08, 0x7e, 0x74, 0x6d, 0x62, 0xcd, 0x98,
	0x9c, 0xcb, 0x0f, 0x34, 0x86, 0x35, 0x09, 0xba, 0xc8, 0xef, 0x71, 0x9e, 0xd9, 0xed, 0x2f, 0xc9,
	0xf9, 0xd2, 0x14, 0xdb, 0x71, 0x01, 0x82, 0x91, 0x03, 0x5d, 0x19, 0x28, 0xe4, 0x7e, 0x44, 0x82,
	0xf9, 0x7b, 0x2d, 0xa3, 0x0f, 0xf8, 0xa1, 0x32, 0x49, 0x86, 0xb2, 0xb7, 0x15, 0x43, 0x73, 0x59,
	0x86, 0x34, 0xc2, 0x8a, 0xa1, 0x03, 0x5d, 0x09, 0x3a, 0x0f, 0x6c, 0xe9, 0xc0, 0x34, 0xc2, 0x65,
	0x60, 0xe7, 0x07, 0xe8, 0x3c, 0x26, 0x62, 0x9e, 0xea, 0xdb, 0xff, 0x0f, 0x76, 0x18, 0x6c, 0x1e,
	0x86, 0x5c, 0x2c, 0xf6, 0x4a, 0x4d, 0x69, 0xc6, 0xcd, 0x2b, 0xcd, 0x61, 0x70, 0x67, 0x21, 0xa6,
	0x6c, 0x99, 0xef, 0xe1, 0x8e, 0xa6, 0x2a, 0x7f, 0x3d, 0xfd, 0x30, 0x3e, 0xa5, 0xcb, 0x4d, 0x9c,
	0x75, 0x5e, 0x37, 0x72, 0xe7, 0x27, 0xe8, 0x56, 0x31, 0x0b, 0x19, 0x37, 0xa6, 0x01, 0x9b, 0x10,
	0x56, 0x50, 0xbc, 0xbf, 0x4c, 0x3a, 0x0b, 0x28, 0xb4, 0x05, 0xd6, 0x88, 0xa6, 0xb1, 0xd0, 0x02,
	0xf6, 0xf4, 0xc2, 0xf9, 0xcd, 0x80, 0x4e, 0x15, 0x5c, 0x92, 0x3d, 0xf8, 0xd7, 0x50, 0x7d, 0xeb,
	0x72, 0x14, 0x17, 0x87, 0x69, 0x8d, 0xc1, 0xca, 0x8d, 0x31, 0x70, 0x7e, 0x35, 0xa0, 0xb7, 0x87,
	0xa7, 0x61, 0x5c, 0x6b, 0xfb, 0x4a, 0x17, 0x5b, 0x60, 0x91, 0x84, 0x8e, 0xce, 0x74, 0xca, 0x3c,
	0xbd, 0x40, 0x6f, 0x00, 0xc4, 0xe4, 0xa9, 0xf0, 0xf5, 0x96, 0x66, 0xde, 0x96, 0x96, 0xcf, 0xd4,
	0xf6, 0x09, 0xb4, 0xab, 0x9a, 0xaa, 0x6e, 0xbb, 0x7a, 0x49, 0x5b, 0x92, 0xf7, 0x8b, 0xcc, 0x36,
	0xbc, 0x56, 0x5a, 0xda, 0x5e, 0x7f, 0x9e, 0x6f, 0x1b, 0x2f, 0xf2, 0x6d, 0xe3, 0x8f, 0x7c, 0xdb,
	0xf8, 0xa6, 0xeb, 0xf6, 0xef, 0xcf, 0xdd, 0x87, 0x0d, 0x45, 0xee, 0xbd, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0x8b, 0xa4, 0x57, 0xc5, 0x0e, 0x00, 0x00,
}

func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RouteVersion != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintShard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LeaderDiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.LeaderDiskID))
		i--
		dAtA[i] = 0x18
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x22
	}
	if m.Learner {
		i--
		if m.Learner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.DiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.DiskID))
		i--
		dAtA[i] = 0x10
	}
	if m.Suid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Suid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardUnitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardUnitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardUnitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Learner {
		i--
		if m.Learner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RouteVersion != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintShard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.LeaderDiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.LeaderDiskID))
		i--
		dAtA[i] = 0x20
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.DiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.DiskID))
		i--
		dAtA[i] = 0x10
	}
	if m.Suid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Suid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RouteVersion != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.OldRouteVersion != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.OldRouteVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Suid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Suid))
		i--
		dAtA[i] = 0x18
	}
	if m.DiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.DiskID))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskType != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardReportArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardReportArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardReportArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShardReportRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardReportRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardReportRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShardTasks) > 0 {
		for iNdEx := len(m.ShardTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllocShardUnitArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocShardUnitArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocShardUnitArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Suid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Suid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllocShardUnitRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocShardUnitRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocShardUnitRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.DiskID))
		i--
		dAtA[i] = 0x10
	}
	if m.Suid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Suid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateShardArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateShardArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateShardArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OldIsLeaner {
		i--
		if m.OldIsLeaner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.OldSuid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.OldSuid))
		i--
		dAtA[i] = 0x20
	}
	if m.NewIsLeaner {
		i--
		if m.NewIsLeaner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NewDiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.NewDiskID))
		i--
		dAtA[i] = 0x10
	}
	if m.NewSuid != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.NewSuid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetShardArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShardArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShardArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShardID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListShardUnitArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListShardUnitArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListShardUnitArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiskID != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.DiskID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListShardUnitRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListShardUnitRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListShardUnitRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShardUnitInfos) > 0 {
		for iNdEx := len(m.ShardUnitInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardUnitInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListShardArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListShardArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListShardArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Marker != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Marker))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListShardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListShardRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListShardRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Marker != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Marker))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminUpdateShardUnitArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminUpdateShardUnitArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminUpdateShardUnitArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.ShardUnitInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintShard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.NextEpoch != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.NextEpoch))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	offset -= sovShard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovShard(uint64(m.ShardID))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovShard(uint64(m.AppliedIndex))
	}
	if m.LeaderDiskID != 0 {
		n += 1 + sovShard(uint64(m.LeaderDiskID))
	}
	l = m.Range.Size()
	n += 1 + l + sovShard(uint64(l))
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.RouteVersion != 0 {
		n += 1 + sovShard(uint64(m.RouteVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suid != 0 {
		n += 1 + sovShard(uint64(m.Suid))
	}
	if m.DiskID != 0 {
		n += 1 + sovShard(uint64(m.DiskID))
	}
	if m.Learner {
		n += 2
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardUnitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suid != 0 {
		n += 1 + sovShard(uint64(m.Suid))
	}
	if m.DiskID != 0 {
		n += 1 + sovShard(uint64(m.DiskID))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovShard(uint64(m.AppliedIndex))
	}
	if m.LeaderDiskID != 0 {
		n += 1 + sovShard(uint64(m.LeaderDiskID))
	}
	l = m.Range.Size()
	n += 1 + l + sovShard(uint64(l))
	if m.RouteVersion != 0 {
		n += 1 + sovShard(uint64(m.RouteVersion))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.Learner {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovShard(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskType != 0 {
		n += 1 + sovShard(uint64(m.TaskType))
	}
	if m.DiskID != 0 {
		n += 1 + sovShard(uint64(m.DiskID))
	}
	if m.Suid != 0 {
		n += 1 + sovShard(uint64(m.Suid))
	}
	if m.OldRouteVersion != 0 {
		n += 1 + sovShard(uint64(m.OldRouteVersion))
	}
	if m.RouteVersion != 0 {
		n += 1 + sovShard(uint64(m.RouteVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardReportArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardReportRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardTasks) > 0 {
		for _, e := range m.ShardTasks {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocShardUnitArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suid != 0 {
		n += 1 + sovShard(uint64(m.Suid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocShardUnitRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suid != 0 {
		n += 1 + sovShard(uint64(m.Suid))
	}
	if m.DiskID != 0 {
		n += 1 + sovShard(uint64(m.DiskID))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateShardArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewSuid != 0 {
		n += 1 + sovShard(uint64(m.NewSuid))
	}
	if m.NewDiskID != 0 {
		n += 1 + sovShard(uint64(m.NewDiskID))
	}
	if m.NewIsLeaner {
		n += 2
	}
	if m.OldSuid != 0 {
		n += 1 + sovShard(uint64(m.OldSuid))
	}
	if m.OldIsLeaner {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShardArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovShard(uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListShardUnitArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiskID != 0 {
		n += 1 + sovShard(uint64(m.DiskID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListShardUnitRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardUnitInfos) > 0 {
		for _, e := range m.ShardUnitInfos {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListShardArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Marker != 0 {
		n += 1 + sovShard(uint64(m.Marker))
	}
	if m.Count != 0 {
		n += 1 + sovShard(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListShardRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.Marker != 0 {
		n += 1 + sovShard(uint64(m.Marker))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminUpdateShardUnitArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovShard(uint64(m.Epoch))
	}
	if m.NextEpoch != 0 {
		n += 1 + sovShard(uint64(m.NextEpoch))
	}
	l = m.ShardUnitInfo.Size()
	n += 1 + l + sovShard(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderDiskID", wireType)
			}
			m.LeaderDiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderDiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, ShardUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suid", wireType)
			}
			m.Suid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskID", wireType)
			}
			m.DiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Learner = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardUnitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardUnitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardUnitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suid", wireType)
			}
			m.Suid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskID", wireType)
			}
			m.DiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderDiskID", wireType)
			}
			m.LeaderDiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderDiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Learner = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= github_com_cubefs_cubefs_blobstore_common_proto.ShardUnitStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= github_com_cubefs_cubefs_blobstore_common_proto.ShardTaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskID", wireType)
			}
			m.DiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suid", wireType)
			}
			m.Suid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldRouteVersion", wireType)
			}
			m.OldRouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldRouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardReportArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardReportArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardReportArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, ShardUnitInfo{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardReportRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardReportRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardReportRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardTasks = append(m.ShardTasks, ShardTask{})
			if err := m.ShardTasks[len(m.ShardTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocShardUnitArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocShardUnitArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocShardUnitArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suid", wireType)
			}
			m.Suid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocShardUnitRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocShardUnitRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocShardUnitRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suid", wireType)
			}
			m.Suid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskID", wireType)
			}
			m.DiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateShardArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateShardArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateShardArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSuid", wireType)
			}
			m.NewSuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSuid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDiskID", wireType)
			}
			m.NewDiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIsLeaner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewIsLeaner = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSuid", wireType)
			}
			m.OldSuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldSuid |= github_com_cubefs_cubefs_blobstore_common_proto.Suid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldIsLeaner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldIsLeaner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShardArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShardArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShardArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListShardUnitArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListShardUnitArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListShardUnitArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskID", wireType)
			}
			m.DiskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskID |= github_com_cubefs_cubefs_blobstore_common_proto.DiskID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListShardUnitRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListShardUnitRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListShardUnitRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardUnitInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardUnitInfos = append(m.ShardUnitInfos, ShardUnitInfo{})
			if err := m.ShardUnitInfos[len(m.ShardUnitInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListShardArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListShardArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListShardArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			m.Marker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marker |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListShardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListShardRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListShardRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			m.Marker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marker |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminUpdateShardUnitArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminUpdateShardUnitArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminUpdateShardUnitArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpoch", wireType)
			}
			m.NextEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardUnitInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShardUnitInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShard = fmt.Errorf("proto: unexpected end of group")
)
