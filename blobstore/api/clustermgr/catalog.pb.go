// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: catalog.proto

package clustermgr

import (
	fmt "fmt"
	github_com_cubefs_cubefs_blobstore_common_proto "github.com/cubefs/cubefs/blobstore/common/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Space struct {
	SpaceID              github_com_cubefs_cubefs_blobstore_common_proto.SpaceID     `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceID" json:"space_id,omitempty"`
	Name                 string                                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               github_com_cubefs_cubefs_blobstore_common_proto.SpaceStatus `protobuf:"varint,3,opt,name=status,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceStatus" json:"status,omitempty"`
	FieldMetas           []FieldMeta                                                 `protobuf:"bytes,4,rep,name=field_metas,json=fieldMetas,proto3" json:"field_metas"`
	AccessKey            string                                                      `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey            string                                                      `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *Space) Reset()      { *m = Space{} }
func (*Space) ProtoMessage() {}
func (*Space) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{0}
}
func (m *Space) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space.Merge(m, src)
}
func (m *Space) XXX_Size() int {
	return m.Size()
}
func (m *Space) XXX_DiscardUnknown() {
	xxx_messageInfo_Space.DiscardUnknown(m)
}

var xxx_messageInfo_Space proto.InternalMessageInfo

func (m *Space) GetSpaceID() github_com_cubefs_cubefs_blobstore_common_proto.SpaceID {
	if m != nil {
		return m.SpaceID
	}
	return 0
}

func (m *Space) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Space) GetStatus() github_com_cubefs_cubefs_blobstore_common_proto.SpaceStatus {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Space) GetFieldMetas() []FieldMeta {
	if m != nil {
		return m.FieldMetas
	}
	return nil
}

func (m *Space) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *Space) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

type FieldMeta struct {
	ID                   github_com_cubefs_cubefs_blobstore_common_proto.FieldID     `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.FieldID" json:"id,omitempty"`
	Name                 string                                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FieldType            github_com_cubefs_cubefs_blobstore_common_proto.FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.FieldType" json:"field_type,omitempty"`
	IndexOption          github_com_cubefs_cubefs_blobstore_common_proto.IndexOption `protobuf:"varint,4,opt,name=index_option,json=indexOption,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.IndexOption" json:"index_option,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *FieldMeta) Reset()      { *m = FieldMeta{} }
func (*FieldMeta) ProtoMessage() {}
func (*FieldMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{1}
}
func (m *FieldMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMeta.Merge(m, src)
}
func (m *FieldMeta) XXX_Size() int {
	return m.Size()
}
func (m *FieldMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMeta proto.InternalMessageInfo

func (m *FieldMeta) GetID() github_com_cubefs_cubefs_blobstore_common_proto.FieldID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *FieldMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldMeta) GetFieldType() github_com_cubefs_cubefs_blobstore_common_proto.FieldType {
	if m != nil {
		return m.FieldType
	}
	return 0
}

func (m *FieldMeta) GetIndexOption() github_com_cubefs_cubefs_blobstore_common_proto.IndexOption {
	if m != nil {
		return m.IndexOption
	}
	return 0
}

type CreateSpaceArgs struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FieldMetas           []FieldMeta `protobuf:"bytes,2,rep,name=field_metas,json=fieldMetas,proto3" json:"field_metas"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateSpaceArgs) Reset()      { *m = CreateSpaceArgs{} }
func (*CreateSpaceArgs) ProtoMessage() {}
func (*CreateSpaceArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{2}
}
func (m *CreateSpaceArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpaceArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpaceArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpaceArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpaceArgs.Merge(m, src)
}
func (m *CreateSpaceArgs) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpaceArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpaceArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpaceArgs proto.InternalMessageInfo

func (m *CreateSpaceArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSpaceArgs) GetFieldMetas() []FieldMeta {
	if m != nil {
		return m.FieldMetas
	}
	return nil
}

type GetSpaceByNameArgs struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSpaceByNameArgs) Reset()      { *m = GetSpaceByNameArgs{} }
func (*GetSpaceByNameArgs) ProtoMessage() {}
func (*GetSpaceByNameArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{3}
}
func (m *GetSpaceByNameArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpaceByNameArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpaceByNameArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpaceByNameArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpaceByNameArgs.Merge(m, src)
}
func (m *GetSpaceByNameArgs) XXX_Size() int {
	return m.Size()
}
func (m *GetSpaceByNameArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpaceByNameArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpaceByNameArgs proto.InternalMessageInfo

func (m *GetSpaceByNameArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetSpaceByIDArgs struct {
	SpaceID              github_com_cubefs_cubefs_blobstore_common_proto.SpaceID `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceID" json:"space_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *GetSpaceByIDArgs) Reset()      { *m = GetSpaceByIDArgs{} }
func (*GetSpaceByIDArgs) ProtoMessage() {}
func (*GetSpaceByIDArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{4}
}
func (m *GetSpaceByIDArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpaceByIDArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpaceByIDArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpaceByIDArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpaceByIDArgs.Merge(m, src)
}
func (m *GetSpaceByIDArgs) XXX_Size() int {
	return m.Size()
}
func (m *GetSpaceByIDArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpaceByIDArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpaceByIDArgs proto.InternalMessageInfo

func (m *GetSpaceByIDArgs) GetSpaceID() github_com_cubefs_cubefs_blobstore_common_proto.SpaceID {
	if m != nil {
		return m.SpaceID
	}
	return 0
}

type GetSpaceArgs struct {
	Name                 string                                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SpaceID              github_com_cubefs_cubefs_blobstore_common_proto.SpaceID `protobuf:"varint,2,opt,name=space_id,json=spaceId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceID" json:"space_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *GetSpaceArgs) Reset()      { *m = GetSpaceArgs{} }
func (*GetSpaceArgs) ProtoMessage() {}
func (*GetSpaceArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{5}
}
func (m *GetSpaceArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpaceArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpaceArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpaceArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpaceArgs.Merge(m, src)
}
func (m *GetSpaceArgs) XXX_Size() int {
	return m.Size()
}
func (m *GetSpaceArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpaceArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpaceArgs proto.InternalMessageInfo

func (m *GetSpaceArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSpaceArgs) GetSpaceID() github_com_cubefs_cubefs_blobstore_common_proto.SpaceID {
	if m != nil {
		return m.SpaceID
	}
	return 0
}

type AuthSpaceArgs struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthSpaceArgs) Reset()      { *m = AuthSpaceArgs{} }
func (*AuthSpaceArgs) ProtoMessage() {}
func (*AuthSpaceArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{6}
}
func (m *AuthSpaceArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthSpaceArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthSpaceArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthSpaceArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthSpaceArgs.Merge(m, src)
}
func (m *AuthSpaceArgs) XXX_Size() int {
	return m.Size()
}
func (m *AuthSpaceArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthSpaceArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AuthSpaceArgs proto.InternalMessageInfo

func (m *AuthSpaceArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthSpaceArgs) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CatalogChangeShardAdd struct {
	ShardID              github_com_cubefs_cubefs_blobstore_common_proto.ShardID      `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"shard_id,omitempty"`
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion `protobuf:"varint,2,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	Units                []ShardUnitInfo                                              `protobuf:"bytes,3,rep,name=units,proto3" json:"units"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *CatalogChangeShardAdd) Reset()      { *m = CatalogChangeShardAdd{} }
func (*CatalogChangeShardAdd) ProtoMessage() {}
func (*CatalogChangeShardAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{7}
}
func (m *CatalogChangeShardAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogChangeShardAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogChangeShardAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogChangeShardAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogChangeShardAdd.Merge(m, src)
}
func (m *CatalogChangeShardAdd) XXX_Size() int {
	return m.Size()
}
func (m *CatalogChangeShardAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogChangeShardAdd.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogChangeShardAdd proto.InternalMessageInfo

func (m *CatalogChangeShardAdd) GetShardID() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *CatalogChangeShardAdd) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *CatalogChangeShardAdd) GetUnits() []ShardUnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type CatalogChangeShardUpdate struct {
	ShardID              github_com_cubefs_cubefs_blobstore_common_proto.ShardID      `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.ShardID" json:"shard_id,omitempty"`
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion `protobuf:"varint,2,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	Unit                 ShardUnitInfo                                                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *CatalogChangeShardUpdate) Reset()      { *m = CatalogChangeShardUpdate{} }
func (*CatalogChangeShardUpdate) ProtoMessage() {}
func (*CatalogChangeShardUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{8}
}
func (m *CatalogChangeShardUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogChangeShardUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogChangeShardUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogChangeShardUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogChangeShardUpdate.Merge(m, src)
}
func (m *CatalogChangeShardUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CatalogChangeShardUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogChangeShardUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogChangeShardUpdate proto.InternalMessageInfo

func (m *CatalogChangeShardUpdate) GetShardID() github_com_cubefs_cubefs_blobstore_common_proto.ShardID {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *CatalogChangeShardUpdate) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *CatalogChangeShardUpdate) GetUnit() ShardUnitInfo {
	if m != nil {
		return m.Unit
	}
	return ShardUnitInfo{}
}

type CatalogChangeItem struct {
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion          `protobuf:"varint,1,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	Type                 github_com_cubefs_cubefs_blobstore_common_proto.CatalogChangeItemType `protobuf:"varint,2,opt,name=type,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.CatalogChangeItemType" json:"type,omitempty"`
	Item                 *types.Any                                                            `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                `json:"-"`
	XXX_sizecache        int32                                                                 `json:"-"`
}

func (m *CatalogChangeItem) Reset()      { *m = CatalogChangeItem{} }
func (*CatalogChangeItem) ProtoMessage() {}
func (*CatalogChangeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{9}
}
func (m *CatalogChangeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogChangeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogChangeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogChangeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogChangeItem.Merge(m, src)
}
func (m *CatalogChangeItem) XXX_Size() int {
	return m.Size()
}
func (m *CatalogChangeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogChangeItem.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogChangeItem proto.InternalMessageInfo

func (m *CatalogChangeItem) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *CatalogChangeItem) GetType() github_com_cubefs_cubefs_blobstore_common_proto.CatalogChangeItemType {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CatalogChangeItem) GetItem() *types.Any {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetCatalogChangesArgs struct {
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion `protobuf:"varint,1,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	NodeID               github_com_cubefs_cubefs_blobstore_common_proto.NodeID       `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.NodeID" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *GetCatalogChangesArgs) Reset()      { *m = GetCatalogChangesArgs{} }
func (*GetCatalogChangesArgs) ProtoMessage() {}
func (*GetCatalogChangesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{10}
}
func (m *GetCatalogChangesArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCatalogChangesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCatalogChangesArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCatalogChangesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalogChangesArgs.Merge(m, src)
}
func (m *GetCatalogChangesArgs) XXX_Size() int {
	return m.Size()
}
func (m *GetCatalogChangesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalogChangesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalogChangesArgs proto.InternalMessageInfo

func (m *GetCatalogChangesArgs) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *GetCatalogChangesArgs) GetNodeID() github_com_cubefs_cubefs_blobstore_common_proto.NodeID {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type GetCatalogChangesRet struct {
	RouteVersion         github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion `protobuf:"varint,1,opt,name=route_version,json=routeVersion,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion" json:"route_version,omitempty"`
	Items                []CatalogChangeItem                                          `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *GetCatalogChangesRet) Reset()      { *m = GetCatalogChangesRet{} }
func (*GetCatalogChangesRet) ProtoMessage() {}
func (*GetCatalogChangesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{11}
}
func (m *GetCatalogChangesRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCatalogChangesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCatalogChangesRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCatalogChangesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalogChangesRet.Merge(m, src)
}
func (m *GetCatalogChangesRet) XXX_Size() int {
	return m.Size()
}
func (m *GetCatalogChangesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalogChangesRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalogChangesRet proto.InternalMessageInfo

func (m *GetCatalogChangesRet) GetRouteVersion() github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *GetCatalogChangesRet) GetItems() []CatalogChangeItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListSpaceArgs struct {
	Marker               github_com_cubefs_cubefs_blobstore_common_proto.SpaceID `protobuf:"varint,1,opt,name=marker,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceID" json:"marker,omitempty"`
	Count                uint32                                                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *ListSpaceArgs) Reset()      { *m = ListSpaceArgs{} }
func (*ListSpaceArgs) ProtoMessage() {}
func (*ListSpaceArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{12}
}
func (m *ListSpaceArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpaceArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpaceArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpaceArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpaceArgs.Merge(m, src)
}
func (m *ListSpaceArgs) XXX_Size() int {
	return m.Size()
}
func (m *ListSpaceArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpaceArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpaceArgs proto.InternalMessageInfo

func (m *ListSpaceArgs) GetMarker() github_com_cubefs_cubefs_blobstore_common_proto.SpaceID {
	if m != nil {
		return m.Marker
	}
	return 0
}

func (m *ListSpaceArgs) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListSpaceRet struct {
	Spaces               []*Space                                                `protobuf:"bytes,1,rep,name=spaces,proto3" json:"spaces,omitempty"`
	Marker               github_com_cubefs_cubefs_blobstore_common_proto.SpaceID `protobuf:"varint,2,opt,name=marker,proto3,casttype=github.com/cubefs/cubefs/blobstore/common/proto.SpaceID" json:"marker,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *ListSpaceRet) Reset()      { *m = ListSpaceRet{} }
func (*ListSpaceRet) ProtoMessage() {}
func (*ListSpaceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abbfcf058acdf89, []int{13}
}
func (m *ListSpaceRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpaceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpaceRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpaceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpaceRet.Merge(m, src)
}
func (m *ListSpaceRet) XXX_Size() int {
	return m.Size()
}
func (m *ListSpaceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpaceRet.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpaceRet proto.InternalMessageInfo

func (m *ListSpaceRet) GetSpaces() []*Space {
	if m != nil {
		return m.Spaces
	}
	return nil
}

func (m *ListSpaceRet) GetMarker() github_com_cubefs_cubefs_blobstore_common_proto.SpaceID {
	if m != nil {
		return m.Marker
	}
	return 0
}

func init() {
	proto.RegisterType((*Space)(nil), "cubefs.blobstore.api.clustermgr.Space")
	proto.RegisterType((*FieldMeta)(nil), "cubefs.blobstore.api.clustermgr.FieldMeta")
	proto.RegisterType((*CreateSpaceArgs)(nil), "cubefs.blobstore.api.clustermgr.CreateSpaceArgs")
	proto.RegisterType((*GetSpaceByNameArgs)(nil), "cubefs.blobstore.api.clustermgr.GetSpaceByNameArgs")
	proto.RegisterType((*GetSpaceByIDArgs)(nil), "cubefs.blobstore.api.clustermgr.GetSpaceByIDArgs")
	proto.RegisterType((*GetSpaceArgs)(nil), "cubefs.blobstore.api.clustermgr.GetSpaceArgs")
	proto.RegisterType((*AuthSpaceArgs)(nil), "cubefs.blobstore.api.clustermgr.AuthSpaceArgs")
	proto.RegisterType((*CatalogChangeShardAdd)(nil), "cubefs.blobstore.api.clustermgr.CatalogChangeShardAdd")
	proto.RegisterType((*CatalogChangeShardUpdate)(nil), "cubefs.blobstore.api.clustermgr.CatalogChangeShardUpdate")
	proto.RegisterType((*CatalogChangeItem)(nil), "cubefs.blobstore.api.clustermgr.CatalogChangeItem")
	proto.RegisterType((*GetCatalogChangesArgs)(nil), "cubefs.blobstore.api.clustermgr.GetCatalogChangesArgs")
	proto.RegisterType((*GetCatalogChangesRet)(nil), "cubefs.blobstore.api.clustermgr.GetCatalogChangesRet")
	proto.RegisterType((*ListSpaceArgs)(nil), "cubefs.blobstore.api.clustermgr.ListSpaceArgs")
	proto.RegisterType((*ListSpaceRet)(nil), "cubefs.blobstore.api.clustermgr.ListSpaceRet")
}

func init() { proto.RegisterFile("catalog.proto", fileDescriptor_0abbfcf058acdf89) }

var fileDescriptor_0abbfcf058acdf89 = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xee, 0xb8, 0x49, 0x96, 0x7d, 0xbb, 0x11, 0x60, 0x6d, 0xa5, 0x50, 0x09, 0x7b, 0xe5, 0x03,
	0x8a, 0x40, 0xb2, 0xa5, 0x56, 0x02, 0x55, 0xcb, 0xaf, 0x64, 0x97, 0x16, 0x53, 0x58, 0x54, 0x2f,
	0x05, 0x09, 0x81, 0xa2, 0x89, 0xfd, 0xe2, 0xb5, 0x36, 0xf6, 0x44, 0x9e, 0x31, 0x6a, 0x38, 0x21,
	0x21, 0xee, 0xfc, 0x0f, 0x9c, 0xe1, 0xc4, 0x1f, 0xd1, 0x0b, 0x52, 0x8f, 0xbd, 0x60, 0xd1, 0xec,
	0x85, 0x23, 0xe7, 0x9c, 0xd0, 0xcc, 0x38, 0xd9, 0xb4, 0xa1, 0x44, 0x9b, 0xb2, 0x3d, 0x70, 0x9b,
	0x5f, 0xef, 0x7b, 0xdf, 0xfb, 0x66, 0xde, 0x67, 0x43, 0x33, 0xa4, 0x82, 0x0e, 0x59, 0xec, 0x8e,
	0x72, 0x26, 0x98, 0x69, 0x87, 0x45, 0x1f, 0x07, 0xdc, 0xed, 0x0f, 0x59, 0x9f, 0x0b, 0x96, 0xa3,
	0x4b, 0x47, 0x89, 0x1b, 0x0e, 0x0b, 0x2e, 0x30, 0x4f, 0xe3, 0xfc, 0xea, 0x4e, 0xcc, 0x62, 0xa6,
	0xce, 0x7a, 0x72, 0xa4, 0xc3, 0xae, 0xbe, 0x12, 0x33, 0x16, 0x0f, 0xd1, 0x53, 0xb3, 0x7e, 0x31,
	0xf0, 0x68, 0x36, 0xae, 0xb6, 0xde, 0xd0, 0x88, 0xde, 0x1c, 0xd1, 0xa3, 0xa3, 0xc4, 0x3b, 0x43,
	0xf4, 0xf8, 0x31, 0xcd, 0x23, 0x7d, 0xd8, 0xf9, 0xd3, 0x80, 0xfa, 0xd1, 0x88, 0x86, 0x68, 0x52,
	0x78, 0x81, 0xcb, 0x41, 0x2f, 0x89, 0x5a, 0x64, 0x97, 0xb4, 0x9b, 0xdd, 0x9b, 0x93, 0xd2, 0xde,
	0x50, 0x9b, 0xfe, 0xc1, 0xb4, 0xb4, 0xdf, 0x8a, 0x13, 0x71, 0x5c, 0xf4, 0xdd, 0x90, 0xa5, 0x5e,
	0x95, 0x62, 0x29, 0x53, 0xc8, 0xd2, 0x94, 0x65, 0x9a, 0x95, 0x5b, 0x85, 0x06, 0x1b, 0x0a, 0xd7,
	0x8f, 0x4c, 0x13, 0x6a, 0x19, 0x4d, 0xb1, 0x65, 0xec, 0x92, 0xf6, 0x66, 0xa0, 0xc6, 0xe6, 0x17,
	0xd0, 0xe0, 0x82, 0x8a, 0x82, 0xb7, 0x2e, 0xab, 0xa4, 0xef, 0x4d, 0x4b, 0x7b, 0x6f, 0xad, 0x4c,
	0x47, 0x0a, 0x26, 0xa8, 0xe0, 0xcc, 0x3b, 0xb0, 0x35, 0x48, 0x70, 0x18, 0xf5, 0x52, 0x14, 0x94,
	0xb7, 0x6a, 0xbb, 0x97, 0xdb, 0x5b, 0xd7, 0x5e, 0x77, 0x57, 0xc8, 0xed, 0xde, 0x94, 0x31, 0x9f,
	0xa0, 0xa0, 0xdd, 0xda, 0xfd, 0xd2, 0xbe, 0x14, 0xc0, 0x60, 0xb6, 0xc0, 0xcd, 0x57, 0x01, 0x68,
	0x18, 0x22, 0xe7, 0xbd, 0x13, 0x1c, 0xb7, 0xea, 0xaa, 0x8a, 0x4d, 0xbd, 0x72, 0x1b, 0xc7, 0x72,
	0x9b, 0x63, 0x98, 0xa3, 0x50, 0xdb, 0x0d, 0xbd, 0xad, 0x57, 0x6e, 0xe3, 0xd8, 0xf9, 0xd5, 0x80,
	0xcd, 0x39, 0xba, 0x79, 0x07, 0x8c, 0xb9, 0xd0, 0x9d, 0x49, 0x69, 0x1b, 0xeb, 0x69, 0xac, 0x00,
	0xfd, 0x83, 0xc0, 0x48, 0xfe, 0x59, 0xde, 0xaf, 0x40, 0x17, 0xd0, 0x13, 0xe3, 0x11, 0x56, 0x12,
	0xbf, 0x33, 0x2d, 0xed, 0x1b, 0x6b, 0x25, 0xfa, 0x6c, 0x3c, 0xc2, 0x60, 0x73, 0x30, 0x1b, 0x9a,
	0x7d, 0xd8, 0x4e, 0xb2, 0x08, 0xef, 0xf5, 0xd8, 0x48, 0x24, 0x2c, 0x6b, 0xd5, 0xd6, 0xbf, 0x42,
	0x5f, 0xe2, 0x7c, 0xaa, 0x60, 0x82, 0xad, 0xe4, 0x6c, 0xe2, 0xdc, 0x83, 0x17, 0xf7, 0x73, 0xa4,
	0x02, 0xd5, 0x25, 0x77, 0xf2, 0x98, 0xcf, 0x0b, 0x25, 0x0b, 0x85, 0x3e, 0x71, 0xdd, 0xc6, 0xb3,
	0x5f, 0xb7, 0xd3, 0x06, 0xf3, 0x16, 0x0a, 0x95, 0xb6, 0x3b, 0x3e, 0xa4, 0xe9, 0x53, 0x93, 0x3b,
	0x05, 0xbc, 0x74, 0x76, 0xd2, 0x3f, 0x50, 0xe7, 0x2e, 0xbe, 0x9f, 0x9c, 0x1f, 0x08, 0x6c, 0xcf,
	0xf2, 0x3e, 0x55, 0x98, 0x45, 0x1e, 0xc6, 0xc5, 0xf0, 0xb8, 0x01, 0xcd, 0x4e, 0x21, 0x8e, 0xff,
	0x9d, 0xc7, 0x0e, 0xd4, 0x05, 0x3b, 0xc1, 0xac, 0x7a, 0x9e, 0x7a, 0xe2, 0xfc, 0x6c, 0xc0, 0x95,
	0x7d, 0x6d, 0x88, 0xfb, 0xc7, 0x34, 0x8b, 0xf1, 0x48, 0x9a, 0x53, 0x27, 0x8a, 0x14, 0x6f, 0x39,
	0x7e, 0x52, 0x3f, 0xb9, 0xb6, 0x26, 0x6f, 0x1d, 0x1a, 0x6c, 0x28, 0x5c, 0x3f, 0x32, 0x11, 0x9a,
	0x39, 0x2b, 0x04, 0xf6, 0xbe, 0xc1, 0x9c, 0xcb, 0xf7, 0x2b, 0xa9, 0xd5, 0xba, 0xef, 0x4f, 0x4b,
	0xfb, 0xed, 0xf3, 0x82, 0x07, 0x12, 0xe8, 0x73, 0x8d, 0x13, 0x6c, 0xe7, 0x0b, 0x33, 0xf3, 0x23,
	0xa8, 0x17, 0x59, 0x22, 0xa4, 0xc3, 0xc9, 0x47, 0xe9, 0xae, 0x7c, 0x94, 0x8a, 0xe8, 0xdd, 0x2c,
	0x11, 0x7e, 0x36, 0x60, 0xd5, 0xc3, 0xd4, 0x10, 0xce, 0x2f, 0x06, 0xb4, 0x96, 0xf5, 0xba, 0x3b,
	0x8a, 0xa8, 0xc0, 0xff, 0x91, 0x64, 0x1f, 0x42, 0x4d, 0xd6, 0xab, 0x0c, 0x6b, 0x5d, 0xc5, 0x14,
	0x82, 0xf3, 0xbd, 0x01, 0x2f, 0x3f, 0x26, 0x98, 0x2f, 0x30, 0x5d, 0x2e, 0x83, 0x5c, 0x48, 0x19,
	0x5f, 0x43, 0x4d, 0xf9, 0xae, 0xee, 0x3b, 0x7f, 0x5a, 0xda, 0x1f, 0x9c, 0x17, 0x7d, 0x89, 0xbb,
	0xf2, 0x60, 0x05, 0x6b, 0xb6, 0xa1, 0x96, 0x08, 0x4c, 0x2b, 0x95, 0x76, 0x5c, 0xfd, 0x4f, 0xe0,
	0xce, 0xfe, 0x09, 0xdc, 0x4e, 0x36, 0x0e, 0xd4, 0x09, 0xe7, 0x77, 0x02, 0x57, 0x6e, 0xa1, 0x78,
	0x0c, 0x8c, 0xab, 0x56, 0x7d, 0x6e, 0x4a, 0x6c, 0x64, 0x2c, 0x5a, 0x30, 0xa1, 0x83, 0x49, 0x69,
	0x37, 0x0e, 0x59, 0xa4, 0x3d, 0xe8, 0xcd, 0xf3, 0xa6, 0xd2, 0x91, 0x41, 0x43, 0x82, 0xfa, 0x91,
	0xf3, 0x1b, 0x81, 0x9d, 0xa5, 0xfa, 0x02, 0x14, 0xcf, 0xab, 0xbc, 0x43, 0xa8, 0x4b, 0x9d, 0x67,
	0xdf, 0x9d, 0x6b, 0x2b, 0x1f, 0xec, 0xd2, 0xb5, 0xce, 0xda, 0x5c, 0xc1, 0x38, 0xdf, 0x42, 0xf3,
	0xe3, 0x84, 0x2f, 0x38, 0xfb, 0x11, 0x34, 0x52, 0x9a, 0x9f, 0x60, 0x5e, 0x35, 0xf6, 0xde, 0xb3,
	0x18, 0x77, 0x05, 0x25, 0x2d, 0x39, 0x64, 0x45, 0x26, 0xf4, 0x95, 0x04, 0x7a, 0xe2, 0xfc, 0x44,
	0x60, 0x7b, 0x9e, 0x5c, 0x6a, 0xf8, 0x2e, 0x34, 0x94, 0xd3, 0xf3, 0x16, 0x51, 0xd5, 0xbd, 0xb6,
	0xba, 0x1d, 0x55, 0x68, 0x15, 0xb5, 0xc0, 0xdd, 0xf8, 0xcf, 0xb8, 0x77, 0xaf, 0x3f, 0x7c, 0x64,
	0x5d, 0xfa, 0xeb, 0x91, 0x45, 0xbe, 0x9b, 0x58, 0xe4, 0xfe, 0xc4, 0x22, 0x0f, 0x26, 0x16, 0xf9,
	0x63, 0x62, 0x91, 0x1f, 0x4f, 0x2d, 0xf2, 0xe0, 0xd4, 0x22, 0x0f, 0x4f, 0x2d, 0xf2, 0x65, 0xd3,
	0xf5, 0xf6, 0xce, 0x78, 0xf5, 0x1b, 0x0a, 0xeb, 0xfa, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59,
	0x2b, 0xd7, 0x83, 0x84, 0x0b, 0x00, 0x00,
}

func (this *Space) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&clustermgr.Space{")
	s = append(s, "SpaceID: "+fmt.Sprintf("%#v", this.SpaceID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.FieldMetas != nil {
		vs := make([]FieldMeta, len(this.FieldMetas))
		for i := range vs {
			vs[i] = this.FieldMetas[i]
		}
		s = append(s, "FieldMetas: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "AccessKey: "+fmt.Sprintf("%#v", this.AccessKey)+",\n")
	s = append(s, "SecretKey: "+fmt.Sprintf("%#v", this.SecretKey)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&clustermgr.FieldMeta{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FieldType: "+fmt.Sprintf("%#v", this.FieldType)+",\n")
	s = append(s, "IndexOption: "+fmt.Sprintf("%#v", this.IndexOption)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpaceArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.CreateSpaceArgs{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.FieldMetas != nil {
		vs := make([]FieldMeta, len(this.FieldMetas))
		for i := range vs {
			vs[i] = this.FieldMetas[i]
		}
		s = append(s, "FieldMetas: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpaceByNameArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&clustermgr.GetSpaceByNameArgs{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpaceByIDArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&clustermgr.GetSpaceByIDArgs{")
	s = append(s, "SpaceID: "+fmt.Sprintf("%#v", this.SpaceID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpaceArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.GetSpaceArgs{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SpaceID: "+fmt.Sprintf("%#v", this.SpaceID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthSpaceArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.AuthSpaceArgs{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CatalogChangeShardAdd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clustermgr.CatalogChangeShardAdd{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "RouteVersion: "+fmt.Sprintf("%#v", this.RouteVersion)+",\n")
	if this.Units != nil {
		vs := make([]ShardUnitInfo, len(this.Units))
		for i := range vs {
			vs[i] = this.Units[i]
		}
		s = append(s, "Units: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CatalogChangeShardUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clustermgr.CatalogChangeShardUpdate{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "RouteVersion: "+fmt.Sprintf("%#v", this.RouteVersion)+",\n")
	s = append(s, "Unit: "+strings.Replace(this.Unit.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CatalogChangeItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clustermgr.CatalogChangeItem{")
	s = append(s, "RouteVersion: "+fmt.Sprintf("%#v", this.RouteVersion)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCatalogChangesArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.GetCatalogChangesArgs{")
	s = append(s, "RouteVersion: "+fmt.Sprintf("%#v", this.RouteVersion)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCatalogChangesRet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.GetCatalogChangesRet{")
	s = append(s, "RouteVersion: "+fmt.Sprintf("%#v", this.RouteVersion)+",\n")
	if this.Items != nil {
		vs := make([]CatalogChangeItem, len(this.Items))
		for i := range vs {
			vs[i] = this.Items[i]
		}
		s = append(s, "Items: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSpaceArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.ListSpaceArgs{")
	s = append(s, "Marker: "+fmt.Sprintf("%#v", this.Marker)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSpaceRet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgr.ListSpaceRet{")
	if this.Spaces != nil {
		s = append(s, "Spaces: "+fmt.Sprintf("%#v", this.Spaces)+",\n")
	}
	s = append(s, "Marker: "+fmt.Sprintf("%#v", this.Marker)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCatalog(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecretKey) > 0 {
		i -= len(m.SecretKey)
		copy(dAtA[i:], m.SecretKey)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.SecretKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldMetas) > 0 {
		for iNdEx := len(m.FieldMetas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FieldMetas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Status != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.SpaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IndexOption != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.IndexOption))
		i--
		dAtA[i] = 0x20
	}
	if m.FieldType != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.FieldType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpaceArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpaceArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpaceArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldMetas) > 0 {
		for iNdEx := len(m.FieldMetas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FieldMetas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpaceByNameArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceByNameArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpaceByNameArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpaceByIDArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceByIDArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpaceByIDArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpaceID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.SpaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpaceArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpaceArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpaceID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.SpaceID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthSpaceArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSpaceArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthSpaceArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CatalogChangeShardAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogChangeShardAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogChangeShardAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RouteVersion != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CatalogChangeShardUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogChangeShardUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogChangeShardUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Unit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCatalog(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RouteVersion != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CatalogChangeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogChangeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogChangeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCatalog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.RouteVersion != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCatalogChangesArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCatalogChangesArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCatalogChangesArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeID != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.RouteVersion != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCatalogChangesRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCatalogChangesRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCatalogChangesRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RouteVersion != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.RouteVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSpaceArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpaceArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpaceArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Marker != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.Marker))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSpaceRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpaceRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpaceRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Marker != 0 {
		i = encodeVarintCatalog(dAtA, i, uint64(m.Marker))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Spaces) > 0 {
		for iNdEx := len(m.Spaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCatalog(dAtA []byte, offset int, v uint64) int {
	offset -= sovCatalog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Space) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceID != 0 {
		n += 1 + sovCatalog(uint64(m.SpaceID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCatalog(uint64(m.Status))
	}
	if len(m.FieldMetas) > 0 {
		for _, e := range m.FieldMetas {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	l = len(m.SecretKey)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCatalog(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.FieldType != 0 {
		n += 1 + sovCatalog(uint64(m.FieldType))
	}
	if m.IndexOption != 0 {
		n += 1 + sovCatalog(uint64(m.IndexOption))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSpaceArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if len(m.FieldMetas) > 0 {
		for _, e := range m.FieldMetas {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSpaceByNameArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSpaceByIDArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceID != 0 {
		n += 1 + sovCatalog(uint64(m.SpaceID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSpaceArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.SpaceID != 0 {
		n += 1 + sovCatalog(uint64(m.SpaceID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthSpaceArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CatalogChangeShardAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovCatalog(uint64(m.ShardID))
	}
	if m.RouteVersion != 0 {
		n += 1 + sovCatalog(uint64(m.RouteVersion))
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CatalogChangeShardUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovCatalog(uint64(m.ShardID))
	}
	if m.RouteVersion != 0 {
		n += 1 + sovCatalog(uint64(m.RouteVersion))
	}
	l = m.Unit.Size()
	n += 1 + l + sovCatalog(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CatalogChangeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteVersion != 0 {
		n += 1 + sovCatalog(uint64(m.RouteVersion))
	}
	if m.Type != 0 {
		n += 1 + sovCatalog(uint64(m.Type))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCatalogChangesArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteVersion != 0 {
		n += 1 + sovCatalog(uint64(m.RouteVersion))
	}
	if m.NodeID != 0 {
		n += 1 + sovCatalog(uint64(m.NodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCatalogChangesRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteVersion != 0 {
		n += 1 + sovCatalog(uint64(m.RouteVersion))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpaceArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Marker != 0 {
		n += 1 + sovCatalog(uint64(m.Marker))
	}
	if m.Count != 0 {
		n += 1 + sovCatalog(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpaceRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spaces) > 0 {
		for _, e := range m.Spaces {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	if m.Marker != 0 {
		n += 1 + sovCatalog(uint64(m.Marker))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCatalog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCatalog(x uint64) (n int) {
	return sovCatalog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Space) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFieldMetas := "[]FieldMeta{"
	for _, f := range this.FieldMetas {
		repeatedStringForFieldMetas += strings.Replace(strings.Replace(f.String(), "FieldMeta", "FieldMeta", 1), `&`, ``, 1) + ","
	}
	repeatedStringForFieldMetas += "}"
	s := strings.Join([]string{`&Space{`,
		`SpaceID:` + fmt.Sprintf("%v", this.SpaceID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`FieldMetas:` + repeatedStringForFieldMetas + `,`,
		`AccessKey:` + fmt.Sprintf("%v", this.AccessKey) + `,`,
		`SecretKey:` + fmt.Sprintf("%v", this.SecretKey) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldMeta{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FieldType:` + fmt.Sprintf("%v", this.FieldType) + `,`,
		`IndexOption:` + fmt.Sprintf("%v", this.IndexOption) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpaceArgs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFieldMetas := "[]FieldMeta{"
	for _, f := range this.FieldMetas {
		repeatedStringForFieldMetas += strings.Replace(strings.Replace(f.String(), "FieldMeta", "FieldMeta", 1), `&`, ``, 1) + ","
	}
	repeatedStringForFieldMetas += "}"
	s := strings.Join([]string{`&CreateSpaceArgs{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FieldMetas:` + repeatedStringForFieldMetas + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceByNameArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceByNameArgs{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceByIDArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceByIDArgs{`,
		`SpaceID:` + fmt.Sprintf("%v", this.SpaceID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceArgs{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SpaceID:` + fmt.Sprintf("%v", this.SpaceID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthSpaceArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthSpaceArgs{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatalogChangeShardAdd) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUnits := "[]ShardUnitInfo{"
	for _, f := range this.Units {
		repeatedStringForUnits += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForUnits += "}"
	s := strings.Join([]string{`&CatalogChangeShardAdd{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`RouteVersion:` + fmt.Sprintf("%v", this.RouteVersion) + `,`,
		`Units:` + repeatedStringForUnits + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatalogChangeShardUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatalogChangeShardUpdate{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`RouteVersion:` + fmt.Sprintf("%v", this.RouteVersion) + `,`,
		`Unit:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Unit), "ShardUnitInfo", "ShardUnitInfo", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CatalogChangeItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatalogChangeItem{`,
		`RouteVersion:` + fmt.Sprintf("%v", this.RouteVersion) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "Any", "types.Any", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCatalogChangesArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCatalogChangesArgs{`,
		`RouteVersion:` + fmt.Sprintf("%v", this.RouteVersion) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCatalogChangesRet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]CatalogChangeItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "CatalogChangeItem", "CatalogChangeItem", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GetCatalogChangesRet{`,
		`RouteVersion:` + fmt.Sprintf("%v", this.RouteVersion) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSpaceArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListSpaceArgs{`,
		`Marker:` + fmt.Sprintf("%v", this.Marker) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSpaceRet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpaces := "[]*Space{"
	for _, f := range this.Spaces {
		repeatedStringForSpaces += strings.Replace(f.String(), "Space", "Space", 1) + ","
	}
	repeatedStringForSpaces += "}"
	s := strings.Join([]string{`&ListSpaceRet{`,
		`Spaces:` + repeatedStringForSpaces + `,`,
		`Marker:` + fmt.Sprintf("%v", this.Marker) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCatalog(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceID", wireType)
			}
			m.SpaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceID |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldMetas = append(m.FieldMetas, FieldMeta{})
			if err := m.FieldMetas[len(m.FieldMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_cubefs_cubefs_blobstore_common_proto.FieldID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			m.FieldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldType |= github_com_cubefs_cubefs_blobstore_common_proto.FieldType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOption", wireType)
			}
			m.IndexOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOption |= github_com_cubefs_cubefs_blobstore_common_proto.IndexOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpaceArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpaceArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpaceArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldMetas = append(m.FieldMetas, FieldMeta{})
			if err := m.FieldMetas[len(m.FieldMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceByNameArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceByNameArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceByNameArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceByIDArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceByIDArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceByIDArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceID", wireType)
			}
			m.SpaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceID |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceID", wireType)
			}
			m.SpaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceID |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSpaceArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSpaceArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSpaceArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogChangeShardAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogChangeShardAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogChangeShardAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, ShardUnitInfo{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogChangeShardUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogChangeShardUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogChangeShardUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= github_com_cubefs_cubefs_blobstore_common_proto.ShardID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogChangeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogChangeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogChangeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= github_com_cubefs_cubefs_blobstore_common_proto.CatalogChangeItemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &types.Any{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCatalogChangesArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCatalogChangesArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCatalogChangesArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cubefs_cubefs_blobstore_common_proto.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCatalogChangesRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCatalogChangesRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCatalogChangesRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteVersion", wireType)
			}
			m.RouteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteVersion |= github_com_cubefs_cubefs_blobstore_common_proto.RouteVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, CatalogChangeItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpaceArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpaceArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpaceArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			m.Marker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marker |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpaceRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpaceRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpaceRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spaces = append(m.Spaces, &Space{})
			if err := m.Spaces[len(m.Spaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			m.Marker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marker |= github_com_cubefs_cubefs_blobstore_common_proto.SpaceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCatalog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCatalog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCatalog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCatalog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCatalog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCatalog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCatalog = fmt.Errorf("proto: unexpected end of group")
)
