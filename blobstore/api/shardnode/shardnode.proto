// Copyright 2022 The CubeFS Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";

package cubefs.blobstore.api.shardnode;
option go_package = "./;shardnode";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

import "gogoproto/gogo.proto";
import "cubefs/blobstore/common/sharding/range.proto";
import "cubefs/blobstore/api/clustermgr/shard.proto";
import "cubefs/blobstore/common/proto/blob.proto";

message Item {
  bytes id = 1 [(gogoproto.customname) = "ID"];
  repeated Field fields = 2 [(gogoproto.nullable) = false];
}

message Field {
  uint32 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.FieldID"];;
  bytes value = 2;
}

message ShardOpHeader {
  uint64 space_id = 1 [(gogoproto.customname) = "SpaceID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.SpaceID"];
  uint32 disk_id = 2  [(gogoproto.customname) = "DiskID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.DiskID"];
  uint32 suid = 3  [(gogoproto.customname) = "Suid", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.Suid"];
  uint64 spaceVersion = 4;
  uint64 route_version = 5;
  repeated bytes shard_keys = 6;
}

message InsertItemArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  Item item = 2 [(gogoproto.nullable) = false];
}

message InsertItemRet {}

message UpdateItemArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  Item item = 2 [(gogoproto.nullable) = false];
}

message UpdateItemRet {}

message DeleteItemArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes id = 2 [(gogoproto.customname) = "ID"];
}

message DeleteItemRet {}

message GetItemArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes id = 2 [(gogoproto.customname) = "ID"];
}

message GetItemRet {
  Item item = 1 [(gogoproto.nullable) = false];
}

message ListItemArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes prefix = 2;
  bytes marker = 3;
  uint64 count = 4;
}

message ListItemRet {
  repeated Item items = 1 [(gogoproto.nullable) = false];
  bytes nextMarker = 2;
}

message AddShardArgs {
  uint32 disk_id = 1 [(gogoproto.customname) = "DiskID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.DiskID"];
  uint64 suid = 2 [(gogoproto.customname) = "Suid", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.Suid"];
  cubefs.blobstore.common.sharding.Range range = 3 [(gogoproto.nullable) = false];
  repeated cubefs.blobstore.api.clustermgr.ShardUnit units = 4 [(gogoproto.nullable) = false];
  uint64 route_version = 5 [(gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.RouteVersion"];
}

message AddShardRet {}

message UpdateShardArgs {
  uint32 disk_id = 1 [(gogoproto.customname) = "DiskID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.DiskID"];
  uint64 suid = 2 [(gogoproto.customname) = "Suid", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.Suid"];
  uint32 ShardUpdateType = 3 [(gogoproto.customname) = "ShardUpdateType", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.ShardUpdateType"];
  cubefs.blobstore.api.clustermgr.ShardUnit unit = 4 [(gogoproto.nullable) = false];
}

message UpdateShardRet {
}

message GetShardArgs {
  uint32 disk_id = 1 [(gogoproto.customname) = "DiskID", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.DiskID"];
  uint64 suid = 2 [(gogoproto.customname) = "Suid", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/proto.Suid"];
}

message GetShardRet {
  cubefs.blobstore.api.clustermgr.ShardUnitInfo shard = 1 [(gogoproto.nullable) = false];
}

message CreateBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes name = 2;
  uint32 codemode = 3 [(gogoproto.customname) = "CodeMode", (gogoproto.casttype) = "github.com/cubefs/cubefs/blobstore/common/codemode.CodeMode"];
  uint64 size = 4;
  uint32 slice_size = 5;
}

message CreateBlobRet {
  cubefs.blobstore.common.proto.Blob blob = 1 [(gogoproto.nullable) = false];
}

message GetBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes name = 2;
}

message GetBlobRet {
  cubefs.blobstore.common.proto.Blob blob = 1 [(gogoproto.nullable) = false];
}

message ListBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes prefix = 2;
  bytes marker = 3;
  uint64 count = 4;
}

message ListBlobRet {
  repeated cubefs.blobstore.common.proto.Blob blobs = 1 [(gogoproto.nullable) = false];
  bytes nextMarker = 2;
}

message DeleteBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes name = 2;
}

message DeleteBlobRet {}

message RetainBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  bytes name = 2;
  uint64 lease = 3;
}

message RetainBlobRet {}

message SealBlobArgs {
  ShardOpHeader header = 1 [(gogoproto.nullable) = false];
  uint64 size = 2;
  bytes name = 3;
}

message SealBlobRet {}