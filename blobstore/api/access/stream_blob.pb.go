// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream_blob.proto

package access

import (
	fmt "fmt"
	sharding "github.com/cubefs/cubefs/blobstore/common/sharding"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListBlobEncodeMarker struct {
	Range                sharding.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range"`
	Marker               []byte         `protobuf:"bytes,2,opt,name=marker,proto3" json:"marker,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListBlobEncodeMarker) Reset()         { *m = ListBlobEncodeMarker{} }
func (m *ListBlobEncodeMarker) String() string { return proto.CompactTextString(m) }
func (*ListBlobEncodeMarker) ProtoMessage()    {}
func (*ListBlobEncodeMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f58ae6b23694640, []int{0}
}
func (m *ListBlobEncodeMarker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlobEncodeMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlobEncodeMarker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlobEncodeMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlobEncodeMarker.Merge(m, src)
}
func (m *ListBlobEncodeMarker) XXX_Size() int {
	return m.Size()
}
func (m *ListBlobEncodeMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlobEncodeMarker.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlobEncodeMarker proto.InternalMessageInfo

func (m *ListBlobEncodeMarker) GetRange() sharding.Range {
	if m != nil {
		return m.Range
	}
	return sharding.Range{}
}

func (m *ListBlobEncodeMarker) GetMarker() []byte {
	if m != nil {
		return m.Marker
	}
	return nil
}

func init() {
	proto.RegisterType((*ListBlobEncodeMarker)(nil), "cubefs.blobstore.api.access.ListBlobEncodeMarker")
}

func init() { proto.RegisterFile("stream_blob.proto", fileDescriptor_3f58ae6b23694640) }

var fileDescriptor_3f58ae6b23694640 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x8d, 0x4f, 0xca, 0xc9, 0x4f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4e,
	0x2e, 0x4d, 0x4a, 0x4d, 0x2b, 0xd6, 0x03, 0x09, 0x15, 0x97, 0xe4, 0x17, 0xa5, 0xea, 0x25, 0x16,
	0x64, 0xea, 0x25, 0x26, 0x27, 0xa7, 0x16, 0x17, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0xd5,
	0xe9, 0x83, 0x58, 0x10, 0x2d, 0x52, 0x3a, 0x10, 0x2d, 0xfa, 0x70, 0x2d, 0xfa, 0xc9, 0xf9, 0xb9,
	0xb9, 0xf9, 0x79, 0xfa, 0xc5, 0x19, 0x89, 0x45, 0x29, 0x99, 0x79, 0xe9, 0xfa, 0x45, 0x89, 0x79,
	0xe9, 0xa9, 0x10, 0xd5, 0x4a, 0xc5, 0x5c, 0x22, 0x3e, 0x99, 0xc5, 0x25, 0x4e, 0x39, 0xf9, 0x49,
	0xae, 0x79, 0xc9, 0xf9, 0x29, 0xa9, 0xbe, 0x89, 0x45, 0xd9, 0xa9, 0x45, 0x42, 0xce, 0x5c, 0xac,
	0x60, 0x65, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xea, 0x7a, 0x18, 0x0e, 0x81, 0x98, 0xaa,
	0x07, 0x33, 0x55, 0x2f, 0x08, 0xa4, 0xdc, 0x89, 0xe5, 0xc4, 0x3d, 0x79, 0x86, 0x20, 0x88, 0x5e,
	0x21, 0x31, 0x2e, 0xb6, 0x5c, 0xb0, 0x71, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x50, 0x9e,
	0x93, 0xf8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x18, 0xc5,
	0xa9, 0xa7, 0x6f, 0x0d, 0xf1, 0x51, 0x12, 0x1b, 0xd8, 0x51, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x82, 0xc2, 0x87, 0x33, 0x0a, 0x01, 0x00, 0x00,
}

func (m *ListBlobEncodeMarker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlobEncodeMarker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlobEncodeMarker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Marker) > 0 {
		i -= len(m.Marker)
		copy(dAtA[i:], m.Marker)
		i = encodeVarintStreamBlob(dAtA, i, uint64(len(m.Marker)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStreamBlob(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStreamBlob(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreamBlob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListBlobEncodeMarker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Range.Size()
	n += 1 + l + sovStreamBlob(uint64(l))
	l = len(m.Marker)
	if l > 0 {
		n += 1 + l + sovStreamBlob(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStreamBlob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamBlob(x uint64) (n int) {
	return sovStreamBlob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListBlobEncodeMarker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlobEncodeMarker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlobEncodeMarker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreamBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStreamBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStreamBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Marker = append(m.Marker[:0], dAtA[iNdEx:postIndex]...)
			if m.Marker == nil {
				m.Marker = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStreamBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamBlob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamBlob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamBlob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreamBlob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreamBlob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreamBlob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamBlob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreamBlob = fmt.Errorf("proto: unexpected end of group")
)
