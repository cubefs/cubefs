// Code generated by MockGen. DO NOT EDIT.
// Source: ./transport.go

// Package base is a generated GoMock package.
package base

import (
	context "context"
	reflect "reflect"

	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	codemode "github.com/cubefs/cubefs/blobstore/common/codemode"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// AllocBid mocks base method.
func (m *MockTransport) AllocBid(ctx context.Context, count uint64) (proto.BlobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocBid", ctx, count)
	ret0, _ := ret[0].(proto.BlobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocBid indicates an expected call of AllocBid.
func (mr *MockTransportMockRecorder) AllocBid(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocBid", reflect.TypeOf((*MockTransport)(nil).AllocBid), ctx, count)
}

// AllocDiskID mocks base method.
func (m *MockTransport) AllocDiskID(ctx context.Context) (proto.DiskID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocDiskID", ctx)
	ret0, _ := ret[0].(proto.DiskID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocDiskID indicates an expected call of AllocDiskID.
func (mr *MockTransportMockRecorder) AllocDiskID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocDiskID", reflect.TypeOf((*MockTransport)(nil).AllocDiskID), ctx)
}

// AllocVolume mocks base method.
func (m *MockTransport) AllocVolume(ctx context.Context, isInit bool, mode codemode.CodeMode, count int) (clustermgr.AllocatedVolumeInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocVolume", ctx, isInit, mode, count)
	ret0, _ := ret[0].(clustermgr.AllocatedVolumeInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocVolume indicates an expected call of AllocVolume.
func (mr *MockTransportMockRecorder) AllocVolume(ctx, isInit, mode, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocVolume", reflect.TypeOf((*MockTransport)(nil).AllocVolume), ctx, isInit, mode, count)
}

// GetAllSpaces mocks base method.
func (m *MockTransport) GetAllSpaces(ctx context.Context) ([]clustermgr.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", ctx)
	ret0, _ := ret[0].([]clustermgr.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockTransportMockRecorder) GetAllSpaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockTransport)(nil).GetAllSpaces), ctx)
}

// GetConfig mocks base method.
func (m *MockTransport) GetConfig(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockTransportMockRecorder) GetConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockTransport)(nil).GetConfig), ctx, key)
}

// GetDisk mocks base method.
func (m *MockTransport) GetDisk(ctx context.Context, diskID proto.DiskID) (*clustermgr.ShardNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisk", ctx, diskID)
	ret0, _ := ret[0].(*clustermgr.ShardNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk.
func (mr *MockTransportMockRecorder) GetDisk(ctx, diskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockTransport)(nil).GetDisk), ctx, diskID)
}

// GetMyself mocks base method.
func (m *MockTransport) GetMyself() *clustermgr.ShardNodeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyself")
	ret0, _ := ret[0].(*clustermgr.ShardNodeInfo)
	return ret0
}

// GetMyself indicates an expected call of GetMyself.
func (mr *MockTransportMockRecorder) GetMyself() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyself", reflect.TypeOf((*MockTransport)(nil).GetMyself))
}

// GetNode mocks base method.
func (m *MockTransport) GetNode(ctx context.Context, nodeID proto.NodeID) (*clustermgr.ShardNodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, nodeID)
	ret0, _ := ret[0].(*clustermgr.ShardNodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockTransportMockRecorder) GetNode(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockTransport)(nil).GetNode), ctx, nodeID)
}

// GetSpace mocks base method.
func (m *MockTransport) GetSpace(ctx context.Context, sid proto.SpaceID) (*clustermgr.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpace", ctx, sid)
	ret0, _ := ret[0].(*clustermgr.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpace indicates an expected call of GetSpace.
func (mr *MockTransportMockRecorder) GetSpace(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpace", reflect.TypeOf((*MockTransport)(nil).GetSpace), ctx, sid)
}

// HeartbeatDisks mocks base method.
func (m *MockTransport) HeartbeatDisks(ctx context.Context, disks []clustermgr.ShardNodeDiskHeartbeatInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartbeatDisks", ctx, disks)
	ret0, _ := ret[0].(error)
	return ret0
}

// HeartbeatDisks indicates an expected call of HeartbeatDisks.
func (mr *MockTransportMockRecorder) HeartbeatDisks(ctx, disks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatDisks", reflect.TypeOf((*MockTransport)(nil).HeartbeatDisks), ctx, disks)
}

// ListDisks mocks base method.
func (m *MockTransport) ListDisks(ctx context.Context) ([]clustermgr.ShardNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisks", ctx)
	ret0, _ := ret[0].([]clustermgr.ShardNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisks indicates an expected call of ListDisks.
func (mr *MockTransportMockRecorder) ListDisks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisks", reflect.TypeOf((*MockTransport)(nil).ListDisks), ctx)
}

// NodeID mocks base method.
func (m *MockTransport) NodeID() proto.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(proto.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *MockTransportMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockTransport)(nil).NodeID))
}

// Register mocks base method.
func (m *MockTransport) Register(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockTransportMockRecorder) Register(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTransport)(nil).Register), ctx)
}

// RegisterDisk mocks base method.
func (m *MockTransport) RegisterDisk(ctx context.Context, disk *clustermgr.ShardNodeDiskInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDisk", ctx, disk)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDisk indicates an expected call of RegisterDisk.
func (mr *MockTransportMockRecorder) RegisterDisk(ctx, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDisk", reflect.TypeOf((*MockTransport)(nil).RegisterDisk), ctx, disk)
}

// RetainVolume mocks base method.
func (m *MockTransport) RetainVolume(ctx context.Context, tokens []string) (clustermgr.RetainVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainVolume", ctx, tokens)
	ret0, _ := ret[0].(clustermgr.RetainVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetainVolume indicates an expected call of RetainVolume.
func (mr *MockTransportMockRecorder) RetainVolume(ctx, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainVolume", reflect.TypeOf((*MockTransport)(nil).RetainVolume), ctx, tokens)
}

// SetDiskBroken mocks base method.
func (m *MockTransport) SetDiskBroken(ctx context.Context, diskID proto.DiskID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiskBroken", ctx, diskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiskBroken indicates an expected call of SetDiskBroken.
func (mr *MockTransportMockRecorder) SetDiskBroken(ctx, diskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskBroken", reflect.TypeOf((*MockTransport)(nil).SetDiskBroken), ctx, diskID)
}

// ShardReport mocks base method.
func (m *MockTransport) ShardReport(ctx context.Context, reports []clustermgr.ShardUnitInfo) ([]clustermgr.ShardTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardReport", ctx, reports)
	ret0, _ := ret[0].([]clustermgr.ShardTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardReport indicates an expected call of ShardReport.
func (mr *MockTransportMockRecorder) ShardReport(ctx, reports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardReport", reflect.TypeOf((*MockTransport)(nil).ShardReport), ctx, reports)
}

// MockNodeTransport is a mock of NodeTransport interface.
type MockNodeTransport struct {
	ctrl     *gomock.Controller
	recorder *MockNodeTransportMockRecorder
}

// MockNodeTransportMockRecorder is the mock recorder for MockNodeTransport.
type MockNodeTransportMockRecorder struct {
	mock *MockNodeTransport
}

// NewMockNodeTransport creates a new mock instance.
func NewMockNodeTransport(ctrl *gomock.Controller) *MockNodeTransport {
	mock := &MockNodeTransport{ctrl: ctrl}
	mock.recorder = &MockNodeTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeTransport) EXPECT() *MockNodeTransportMockRecorder {
	return m.recorder
}

// AllocDiskID mocks base method.
func (m *MockNodeTransport) AllocDiskID(ctx context.Context) (proto.DiskID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocDiskID", ctx)
	ret0, _ := ret[0].(proto.DiskID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocDiskID indicates an expected call of AllocDiskID.
func (mr *MockNodeTransportMockRecorder) AllocDiskID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocDiskID", reflect.TypeOf((*MockNodeTransport)(nil).AllocDiskID), ctx)
}

// GetDisk mocks base method.
func (m *MockNodeTransport) GetDisk(ctx context.Context, diskID proto.DiskID) (*clustermgr.ShardNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisk", ctx, diskID)
	ret0, _ := ret[0].(*clustermgr.ShardNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk.
func (mr *MockNodeTransportMockRecorder) GetDisk(ctx, diskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockNodeTransport)(nil).GetDisk), ctx, diskID)
}

// GetMyself mocks base method.
func (m *MockNodeTransport) GetMyself() *clustermgr.ShardNodeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyself")
	ret0, _ := ret[0].(*clustermgr.ShardNodeInfo)
	return ret0
}

// GetMyself indicates an expected call of GetMyself.
func (mr *MockNodeTransportMockRecorder) GetMyself() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyself", reflect.TypeOf((*MockNodeTransport)(nil).GetMyself))
}

// GetNode mocks base method.
func (m *MockNodeTransport) GetNode(ctx context.Context, nodeID proto.NodeID) (*clustermgr.ShardNodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, nodeID)
	ret0, _ := ret[0].(*clustermgr.ShardNodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeTransportMockRecorder) GetNode(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeTransport)(nil).GetNode), ctx, nodeID)
}

// HeartbeatDisks mocks base method.
func (m *MockNodeTransport) HeartbeatDisks(ctx context.Context, disks []clustermgr.ShardNodeDiskHeartbeatInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartbeatDisks", ctx, disks)
	ret0, _ := ret[0].(error)
	return ret0
}

// HeartbeatDisks indicates an expected call of HeartbeatDisks.
func (mr *MockNodeTransportMockRecorder) HeartbeatDisks(ctx, disks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatDisks", reflect.TypeOf((*MockNodeTransport)(nil).HeartbeatDisks), ctx, disks)
}

// ListDisks mocks base method.
func (m *MockNodeTransport) ListDisks(ctx context.Context) ([]clustermgr.ShardNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisks", ctx)
	ret0, _ := ret[0].([]clustermgr.ShardNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisks indicates an expected call of ListDisks.
func (mr *MockNodeTransportMockRecorder) ListDisks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisks", reflect.TypeOf((*MockNodeTransport)(nil).ListDisks), ctx)
}

// NodeID mocks base method.
func (m *MockNodeTransport) NodeID() proto.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(proto.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *MockNodeTransportMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockNodeTransport)(nil).NodeID))
}

// Register mocks base method.
func (m *MockNodeTransport) Register(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockNodeTransportMockRecorder) Register(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNodeTransport)(nil).Register), ctx)
}

// RegisterDisk mocks base method.
func (m *MockNodeTransport) RegisterDisk(ctx context.Context, disk *clustermgr.ShardNodeDiskInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDisk", ctx, disk)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDisk indicates an expected call of RegisterDisk.
func (mr *MockNodeTransportMockRecorder) RegisterDisk(ctx, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDisk", reflect.TypeOf((*MockNodeTransport)(nil).RegisterDisk), ctx, disk)
}

// SetDiskBroken mocks base method.
func (m *MockNodeTransport) SetDiskBroken(ctx context.Context, diskID proto.DiskID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiskBroken", ctx, diskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiskBroken indicates an expected call of SetDiskBroken.
func (mr *MockNodeTransportMockRecorder) SetDiskBroken(ctx, diskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskBroken", reflect.TypeOf((*MockNodeTransport)(nil).SetDiskBroken), ctx, diskID)
}

// MockSpaceTransport is a mock of SpaceTransport interface.
type MockSpaceTransport struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceTransportMockRecorder
}

// MockSpaceTransportMockRecorder is the mock recorder for MockSpaceTransport.
type MockSpaceTransportMockRecorder struct {
	mock *MockSpaceTransport
}

// NewMockSpaceTransport creates a new mock instance.
func NewMockSpaceTransport(ctrl *gomock.Controller) *MockSpaceTransport {
	mock := &MockSpaceTransport{ctrl: ctrl}
	mock.recorder = &MockSpaceTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceTransport) EXPECT() *MockSpaceTransportMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockSpaceTransport) GetAllSpaces(ctx context.Context) ([]clustermgr.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", ctx)
	ret0, _ := ret[0].([]clustermgr.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockSpaceTransportMockRecorder) GetAllSpaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockSpaceTransport)(nil).GetAllSpaces), ctx)
}

// GetSpace mocks base method.
func (m *MockSpaceTransport) GetSpace(ctx context.Context, sid proto.SpaceID) (*clustermgr.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpace", ctx, sid)
	ret0, _ := ret[0].(*clustermgr.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpace indicates an expected call of GetSpace.
func (mr *MockSpaceTransportMockRecorder) GetSpace(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpace", reflect.TypeOf((*MockSpaceTransport)(nil).GetSpace), ctx, sid)
}

// MockAllocVolTransport is a mock of AllocVolTransport interface.
type MockAllocVolTransport struct {
	ctrl     *gomock.Controller
	recorder *MockAllocVolTransportMockRecorder
}

// MockAllocVolTransportMockRecorder is the mock recorder for MockAllocVolTransport.
type MockAllocVolTransportMockRecorder struct {
	mock *MockAllocVolTransport
}

// NewMockAllocVolTransport creates a new mock instance.
func NewMockAllocVolTransport(ctrl *gomock.Controller) *MockAllocVolTransport {
	mock := &MockAllocVolTransport{ctrl: ctrl}
	mock.recorder = &MockAllocVolTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocVolTransport) EXPECT() *MockAllocVolTransportMockRecorder {
	return m.recorder
}

// AllocBid mocks base method.
func (m *MockAllocVolTransport) AllocBid(ctx context.Context, count uint64) (proto.BlobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocBid", ctx, count)
	ret0, _ := ret[0].(proto.BlobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocBid indicates an expected call of AllocBid.
func (mr *MockAllocVolTransportMockRecorder) AllocBid(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocBid", reflect.TypeOf((*MockAllocVolTransport)(nil).AllocBid), ctx, count)
}

// AllocVolume mocks base method.
func (m *MockAllocVolTransport) AllocVolume(ctx context.Context, isInit bool, mode codemode.CodeMode, count int) (clustermgr.AllocatedVolumeInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocVolume", ctx, isInit, mode, count)
	ret0, _ := ret[0].(clustermgr.AllocatedVolumeInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocVolume indicates an expected call of AllocVolume.
func (mr *MockAllocVolTransportMockRecorder) AllocVolume(ctx, isInit, mode, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocVolume", reflect.TypeOf((*MockAllocVolTransport)(nil).AllocVolume), ctx, isInit, mode, count)
}

// RetainVolume mocks base method.
func (m *MockAllocVolTransport) RetainVolume(ctx context.Context, tokens []string) (clustermgr.RetainVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainVolume", ctx, tokens)
	ret0, _ := ret[0].(clustermgr.RetainVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetainVolume indicates an expected call of RetainVolume.
func (mr *MockAllocVolTransportMockRecorder) RetainVolume(ctx, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainVolume", reflect.TypeOf((*MockAllocVolTransport)(nil).RetainVolume), ctx, tokens)
}
