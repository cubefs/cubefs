// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/shard.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	shardnode "github.com/cubefs/cubefs/blobstore/api/shardnode"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	storage "github.com/cubefs/cubefs/blobstore/shardnode/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockValGetter is a mock of ValGetter interface.
type MockValGetter struct {
	ctrl     *gomock.Controller
	recorder *MockValGetterMockRecorder
}

// MockValGetterMockRecorder is the mock recorder for MockValGetter.
type MockValGetterMockRecorder struct {
	mock *MockValGetter
}

// NewMockValGetter creates a new mock instance.
func NewMockValGetter(ctrl *gomock.Controller) *MockValGetter {
	mock := &MockValGetter{ctrl: ctrl}
	mock.recorder = &MockValGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValGetter) EXPECT() *MockValGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValGetter)(nil).Close))
}

// Read mocks base method.
func (m *MockValGetter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockValGetterMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockValGetter)(nil).Read), p)
}

// Size mocks base method.
func (m *MockValGetter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockValGetterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockValGetter)(nil).Size))
}

// Value mocks base method.
func (m *MockValGetter) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValGetterMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValGetter)(nil).Value))
}

// MockShardBlobHandler is a mock of ShardBlobHandler interface.
type MockShardBlobHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShardBlobHandlerMockRecorder
}

// MockShardBlobHandlerMockRecorder is the mock recorder for MockShardBlobHandler.
type MockShardBlobHandlerMockRecorder struct {
	mock *MockShardBlobHandler
}

// NewMockShardBlobHandler creates a new mock instance.
func NewMockShardBlobHandler(ctrl *gomock.Controller) *MockShardBlobHandler {
	mock := &MockShardBlobHandler{ctrl: ctrl}
	mock.recorder = &MockShardBlobHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardBlobHandler) EXPECT() *MockShardBlobHandlerMockRecorder {
	return m.recorder
}

// CreateBlob mocks base method.
func (m *MockShardBlobHandler) CreateBlob(ctx context.Context, h storage.OpHeader, name []byte, b proto.Blob) (proto.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", ctx, h, name, b)
	ret0, _ := ret[0].(proto.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockShardBlobHandlerMockRecorder) CreateBlob(ctx, h, name, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockShardBlobHandler)(nil).CreateBlob), ctx, h, name, b)
}

// DeleteBlob mocks base method.
func (m *MockShardBlobHandler) DeleteBlob(ctx context.Context, h storage.OpHeader, name []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, h, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockShardBlobHandlerMockRecorder) DeleteBlob(ctx, h, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockShardBlobHandler)(nil).DeleteBlob), ctx, h, name)
}

// GetBlob mocks base method.
func (m *MockShardBlobHandler) GetBlob(ctx context.Context, h storage.OpHeader, name []byte) (proto.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", ctx, h, name)
	ret0, _ := ret[0].(proto.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockShardBlobHandlerMockRecorder) GetBlob(ctx, h, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockShardBlobHandler)(nil).GetBlob), ctx, h, name)
}

// ListBlob mocks base method.
func (m *MockShardBlobHandler) ListBlob(ctx context.Context, h storage.OpHeader, prefix, marker []byte, count uint64) ([]proto.Blob, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlob", ctx, h, prefix, marker, count)
	ret0, _ := ret[0].([]proto.Blob)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlob indicates an expected call of ListBlob.
func (mr *MockShardBlobHandlerMockRecorder) ListBlob(ctx, h, prefix, marker, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlob", reflect.TypeOf((*MockShardBlobHandler)(nil).ListBlob), ctx, h, prefix, marker, count)
}

// UpdateBlob mocks base method.
func (m *MockShardBlobHandler) UpdateBlob(ctx context.Context, h storage.OpHeader, name []byte, b proto.Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlob", ctx, h, name, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlob indicates an expected call of UpdateBlob.
func (mr *MockShardBlobHandlerMockRecorder) UpdateBlob(ctx, h, name, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlob", reflect.TypeOf((*MockShardBlobHandler)(nil).UpdateBlob), ctx, h, name, b)
}

// MockShardItemHandler is a mock of ShardItemHandler interface.
type MockShardItemHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShardItemHandlerMockRecorder
}

// MockShardItemHandlerMockRecorder is the mock recorder for MockShardItemHandler.
type MockShardItemHandlerMockRecorder struct {
	mock *MockShardItemHandler
}

// NewMockShardItemHandler creates a new mock instance.
func NewMockShardItemHandler(ctrl *gomock.Controller) *MockShardItemHandler {
	mock := &MockShardItemHandler{ctrl: ctrl}
	mock.recorder = &MockShardItemHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardItemHandler) EXPECT() *MockShardItemHandlerMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockShardItemHandler) DeleteItem(ctx context.Context, h storage.OpHeader, id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, h, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockShardItemHandlerMockRecorder) DeleteItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockShardItemHandler)(nil).DeleteItem), ctx, h, id)
}

// GetItem mocks base method.
func (m *MockShardItemHandler) GetItem(ctx context.Context, h storage.OpHeader, id []byte) (shardnode.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, h, id)
	ret0, _ := ret[0].(shardnode.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockShardItemHandlerMockRecorder) GetItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockShardItemHandler)(nil).GetItem), ctx, h, id)
}

// InsertItem mocks base method.
func (m *MockShardItemHandler) InsertItem(ctx context.Context, h storage.OpHeader, id []byte, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertItem", ctx, h, id, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertItem indicates an expected call of InsertItem.
func (mr *MockShardItemHandlerMockRecorder) InsertItem(ctx, h, id, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertItem", reflect.TypeOf((*MockShardItemHandler)(nil).InsertItem), ctx, h, id, i)
}

// ListItem mocks base method.
func (m *MockShardItemHandler) ListItem(ctx context.Context, h storage.OpHeader, prefix, marker []byte, count uint64) ([]shardnode.Item, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", ctx, h, prefix, marker, count)
	ret0, _ := ret[0].([]shardnode.Item)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItem indicates an expected call of ListItem.
func (mr *MockShardItemHandlerMockRecorder) ListItem(ctx, h, prefix, marker, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockShardItemHandler)(nil).ListItem), ctx, h, prefix, marker, count)
}

// UpdateItem mocks base method.
func (m *MockShardItemHandler) UpdateItem(ctx context.Context, h storage.OpHeader, id []byte, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, h, id, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockShardItemHandlerMockRecorder) UpdateItem(ctx, h, id, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockShardItemHandler)(nil).UpdateItem), ctx, h, id, i)
}

// MockSpaceShardHandler is a mock of ShardHandler interface.
type MockSpaceShardHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceShardHandlerMockRecorder
}

// MockSpaceShardHandlerMockRecorder is the mock recorder for MockSpaceShardHandler.
type MockSpaceShardHandlerMockRecorder struct {
	mock *MockSpaceShardHandler
}

// NewMockSpaceShardHandler creates a new mock instance.
func NewMockSpaceShardHandler(ctrl *gomock.Controller) *MockSpaceShardHandler {
	mock := &MockSpaceShardHandler{ctrl: ctrl}
	mock.recorder = &MockSpaceShardHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceShardHandler) EXPECT() *MockSpaceShardHandlerMockRecorder {
	return m.recorder
}

// CheckAndClearShard mocks base method.
func (m *MockSpaceShardHandler) CheckAndClearShard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndClearShard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndClearShard indicates an expected call of CheckAndClearShard.
func (mr *MockSpaceShardHandlerMockRecorder) CheckAndClearShard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndClearShard", reflect.TypeOf((*MockSpaceShardHandler)(nil).CheckAndClearShard), ctx)
}

// Checkpoint mocks base method.
func (m *MockSpaceShardHandler) Checkpoint(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockSpaceShardHandlerMockRecorder) Checkpoint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockSpaceShardHandler)(nil).Checkpoint), ctx)
}

// CreateBlob mocks base method.
func (m *MockSpaceShardHandler) CreateBlob(ctx context.Context, h storage.OpHeader, name []byte, b proto.Blob) (proto.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", ctx, h, name, b)
	ret0, _ := ret[0].(proto.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockSpaceShardHandlerMockRecorder) CreateBlob(ctx, h, name, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockSpaceShardHandler)(nil).CreateBlob), ctx, h, name, b)
}

// DeleteBlob mocks base method.
func (m *MockSpaceShardHandler) DeleteBlob(ctx context.Context, h storage.OpHeader, name []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, h, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockSpaceShardHandlerMockRecorder) DeleteBlob(ctx, h, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockSpaceShardHandler)(nil).DeleteBlob), ctx, h, name)
}

// DeleteItem mocks base method.
func (m *MockSpaceShardHandler) DeleteItem(ctx context.Context, h storage.OpHeader, id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, h, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockSpaceShardHandlerMockRecorder) DeleteItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).DeleteItem), ctx, h, id)
}

// GetBlob mocks base method.
func (m *MockSpaceShardHandler) GetBlob(ctx context.Context, h storage.OpHeader, name []byte) (proto.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", ctx, h, name)
	ret0, _ := ret[0].(proto.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockSpaceShardHandlerMockRecorder) GetBlob(ctx, h, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetBlob), ctx, h, name)
}

// GetItem mocks base method.
func (m *MockSpaceShardHandler) GetItem(ctx context.Context, h storage.OpHeader, id []byte) (shardnode.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, h, id)
	ret0, _ := ret[0].(shardnode.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockSpaceShardHandlerMockRecorder) GetItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetItem), ctx, h, id)
}

// GetRouteVersion mocks base method.
func (m *MockSpaceShardHandler) GetRouteVersion() proto.RouteVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteVersion")
	ret0, _ := ret[0].(proto.RouteVersion)
	return ret0
}

// GetRouteVersion indicates an expected call of GetRouteVersion.
func (mr *MockSpaceShardHandlerMockRecorder) GetRouteVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteVersion", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetRouteVersion))
}

// GetSuid mocks base method.
func (m *MockSpaceShardHandler) GetSuid() proto.Suid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuid")
	ret0, _ := ret[0].(proto.Suid)
	return ret0
}

// GetSuid indicates an expected call of GetSuid.
func (mr *MockSpaceShardHandlerMockRecorder) GetSuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuid", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetSuid))
}

// GetUnits mocks base method.
func (m *MockSpaceShardHandler) GetUnits() []clustermgr.ShardUnit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnits")
	ret0, _ := ret[0].([]clustermgr.ShardUnit)
	return ret0
}

// GetUnits indicates an expected call of GetUnits.
func (mr *MockSpaceShardHandlerMockRecorder) GetUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnits", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetUnits))
}

// InsertItem mocks base method.
func (m *MockSpaceShardHandler) InsertItem(ctx context.Context, h storage.OpHeader, id []byte, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertItem", ctx, h, id, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertItem indicates an expected call of InsertItem.
func (mr *MockSpaceShardHandlerMockRecorder) InsertItem(ctx, h, id, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).InsertItem), ctx, h, id, i)
}

// ListBlob mocks base method.
func (m *MockSpaceShardHandler) ListBlob(ctx context.Context, h storage.OpHeader, prefix, marker []byte, count uint64) ([]proto.Blob, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlob", ctx, h, prefix, marker, count)
	ret0, _ := ret[0].([]proto.Blob)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlob indicates an expected call of ListBlob.
func (mr *MockSpaceShardHandlerMockRecorder) ListBlob(ctx, h, prefix, marker, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlob", reflect.TypeOf((*MockSpaceShardHandler)(nil).ListBlob), ctx, h, prefix, marker, count)
}

// ListItem mocks base method.
func (m *MockSpaceShardHandler) ListItem(ctx context.Context, h storage.OpHeader, prefix, marker []byte, count uint64) ([]shardnode.Item, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", ctx, h, prefix, marker, count)
	ret0, _ := ret[0].([]shardnode.Item)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItem indicates an expected call of ListItem.
func (mr *MockSpaceShardHandlerMockRecorder) ListItem(ctx, h, prefix, marker, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).ListItem), ctx, h, prefix, marker, count)
}

// Stats mocks base method.
func (m *MockSpaceShardHandler) Stats(ctx context.Context) (shardnode.ShardStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx)
	ret0, _ := ret[0].(shardnode.ShardStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockSpaceShardHandlerMockRecorder) Stats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockSpaceShardHandler)(nil).Stats), ctx)
}

// TransferLeader mocks base method.
func (m *MockSpaceShardHandler) TransferLeader(ctx context.Context, diskID proto.DiskID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferLeader", ctx, diskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferLeader indicates an expected call of TransferLeader.
func (mr *MockSpaceShardHandlerMockRecorder) TransferLeader(ctx, diskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLeader", reflect.TypeOf((*MockSpaceShardHandler)(nil).TransferLeader), ctx, diskID)
}

// UpdateBlob mocks base method.
func (m *MockSpaceShardHandler) UpdateBlob(ctx context.Context, h storage.OpHeader, name []byte, b proto.Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlob", ctx, h, name, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlob indicates an expected call of UpdateBlob.
func (mr *MockSpaceShardHandlerMockRecorder) UpdateBlob(ctx, h, name, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlob", reflect.TypeOf((*MockSpaceShardHandler)(nil).UpdateBlob), ctx, h, name, b)
}

// UpdateItem mocks base method.
func (m *MockSpaceShardHandler) UpdateItem(ctx context.Context, h storage.OpHeader, id []byte, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, h, id, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockSpaceShardHandlerMockRecorder) UpdateItem(ctx, h, id, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).UpdateItem), ctx, h, id, i)
}
