// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/shard.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	shardnode "github.com/cubefs/cubefs/blobstore/api/shardnode"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockValGetter is a mock of ValGetter interface.
type MockValGetter struct {
	ctrl     *gomock.Controller
	recorder *MockValGetterMockRecorder
}

// MockValGetterMockRecorder is the mock recorder for MockValGetter.
type MockValGetterMockRecorder struct {
	mock *MockValGetter
}

// NewMockValGetter creates a new mock instance.
func NewMockValGetter(ctrl *gomock.Controller) *MockValGetter {
	mock := &MockValGetter{ctrl: ctrl}
	mock.recorder = &MockValGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValGetter) EXPECT() *MockValGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValGetter)(nil).Close))
}

// Read mocks base method.
func (m *MockValGetter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockValGetterMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockValGetter)(nil).Read), p)
}

// Size mocks base method.
func (m *MockValGetter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockValGetterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockValGetter)(nil).Size))
}

// Value mocks base method.
func (m *MockValGetter) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValGetterMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValGetter)(nil).Value))
}

// MockShardKVHandler is a mock of ShardKVHandler interface.
type MockShardKVHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShardKVHandlerMockRecorder
}

// MockShardKVHandlerMockRecorder is the mock recorder for MockShardKVHandler.
type MockShardKVHandlerMockRecorder struct {
	mock *MockShardKVHandler
}

// NewMockShardKVHandler creates a new mock instance.
func NewMockShardKVHandler(ctrl *gomock.Controller) *MockShardKVHandler {
	mock := &MockShardKVHandler{ctrl: ctrl}
	mock.recorder = &MockShardKVHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardKVHandler) EXPECT() *MockShardKVHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockShardKVHandler) Delete(ctx context.Context, h OpHeader, key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, h, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShardKVHandlerMockRecorder) Delete(ctx, h, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShardKVHandler)(nil).Delete), ctx, h, key)
}

// Get mocks base method.
func (m *MockShardKVHandler) Get(ctx context.Context, h OpHeader, key []byte) (ValGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, h, key)
	ret0, _ := ret[0].(ValGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShardKVHandlerMockRecorder) Get(ctx, h, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShardKVHandler)(nil).Get), ctx, h, key)
}

// Insert mocks base method.
func (m *MockShardKVHandler) Insert(ctx context.Context, h OpHeader, kv *KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, h, kv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockShardKVHandlerMockRecorder) Insert(ctx, h, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockShardKVHandler)(nil).Insert), ctx, h, kv)
}

// List mocks base method.
func (m *MockShardKVHandler) List(ctx context.Context, h OpHeader, prefix, marker []byte, count uint64, rangeFunc func([]byte) error) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, h, prefix, marker, count, rangeFunc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockShardKVHandlerMockRecorder) List(ctx, h, prefix, marker, count, rangeFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockShardKVHandler)(nil).List), ctx, h, prefix, marker, count, rangeFunc)
}

// Update mocks base method.
func (m *MockShardKVHandler) Update(ctx context.Context, h OpHeader, kv *KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, h, kv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockShardKVHandlerMockRecorder) Update(ctx, h, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShardKVHandler)(nil).Update), ctx, h, kv)
}

// MockShardItemHandler is a mock of ShardItemHandler interface.
type MockShardItemHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShardItemHandlerMockRecorder
}

// MockShardItemHandlerMockRecorder is the mock recorder for MockShardItemHandler.
type MockShardItemHandlerMockRecorder struct {
	mock *MockShardItemHandler
}

// NewMockShardItemHandler creates a new mock instance.
func NewMockShardItemHandler(ctrl *gomock.Controller) *MockShardItemHandler {
	mock := &MockShardItemHandler{ctrl: ctrl}
	mock.recorder = &MockShardItemHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardItemHandler) EXPECT() *MockShardItemHandlerMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockShardItemHandler) GetItem(ctx context.Context, h OpHeader, id []byte) (shardnode.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, h, id)
	ret0, _ := ret[0].(shardnode.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockShardItemHandlerMockRecorder) GetItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockShardItemHandler)(nil).GetItem), ctx, h, id)
}

// ListItem mocks base method.
func (m *MockShardItemHandler) ListItem(ctx context.Context, h OpHeader, prefix, id []byte, count uint64) ([]shardnode.Item, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", ctx, h, prefix, id, count)
	ret0, _ := ret[0].([]shardnode.Item)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItem indicates an expected call of ListItem.
func (mr *MockShardItemHandlerMockRecorder) ListItem(ctx, h, prefix, id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockShardItemHandler)(nil).ListItem), ctx, h, prefix, id, count)
}

// UpdateItem mocks base method.
func (m *MockShardItemHandler) UpdateItem(ctx context.Context, h OpHeader, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, h, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockShardItemHandlerMockRecorder) UpdateItem(ctx, h, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockShardItemHandler)(nil).UpdateItem), ctx, h, i)
}

// MockSpaceShardHandler is a mock of ShardHandler interface.
type MockSpaceShardHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceShardHandlerMockRecorder
}

// MockSpaceShardHandlerMockRecorder is the mock recorder for MockSpaceShardHandler.
type MockSpaceShardHandlerMockRecorder struct {
	mock *MockSpaceShardHandler
}

// NewMockSpaceShardHandler creates a new mock instance.
func NewMockSpaceShardHandler(ctrl *gomock.Controller) *MockSpaceShardHandler {
	mock := &MockSpaceShardHandler{ctrl: ctrl}
	mock.recorder = &MockSpaceShardHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceShardHandler) EXPECT() *MockSpaceShardHandlerMockRecorder {
	return m.recorder
}

// Checkpoint mocks base method.
func (m *MockSpaceShardHandler) Checkpoint(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockSpaceShardHandlerMockRecorder) Checkpoint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockSpaceShardHandler)(nil).Checkpoint), ctx)
}

// Delete mocks base method.
func (m *MockSpaceShardHandler) Delete(ctx context.Context, h OpHeader, key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, h, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpaceShardHandlerMockRecorder) Delete(ctx, h, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpaceShardHandler)(nil).Delete), ctx, h, key)
}

// Get mocks base method.
func (m *MockSpaceShardHandler) Get(ctx context.Context, h OpHeader, key []byte) (ValGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, h, key)
	ret0, _ := ret[0].(ValGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSpaceShardHandlerMockRecorder) Get(ctx, h, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpaceShardHandler)(nil).Get), ctx, h, key)
}

// GetItem mocks base method.
func (m *MockSpaceShardHandler) GetItem(ctx context.Context, h OpHeader, id []byte) (shardnode.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, h, id)
	ret0, _ := ret[0].(shardnode.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockSpaceShardHandlerMockRecorder) GetItem(ctx, h, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetItem), ctx, h, id)
}

// GetRouteVersion mocks base method.
func (m *MockSpaceShardHandler) GetRouteVersion() proto.RouteVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteVersion")
	ret0, _ := ret[0].(proto.RouteVersion)
	return ret0
}

// GetRouteVersion indicates an expected call of GetRouteVersion.
func (mr *MockSpaceShardHandlerMockRecorder) GetRouteVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteVersion", reflect.TypeOf((*MockSpaceShardHandler)(nil).GetRouteVersion))
}

// Insert mocks base method.
func (m *MockSpaceShardHandler) Insert(ctx context.Context, h OpHeader, kv *KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, h, kv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSpaceShardHandlerMockRecorder) Insert(ctx, h, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSpaceShardHandler)(nil).Insert), ctx, h, kv)
}

// List mocks base method.
func (m *MockSpaceShardHandler) List(ctx context.Context, h OpHeader, prefix, marker []byte, count uint64, rangeFunc func([]byte) error) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, h, prefix, marker, count, rangeFunc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSpaceShardHandlerMockRecorder) List(ctx, h, prefix, marker, count, rangeFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSpaceShardHandler)(nil).List), ctx, h, prefix, marker, count, rangeFunc)
}

// ListItem mocks base method.
func (m *MockSpaceShardHandler) ListItem(ctx context.Context, h OpHeader, prefix, id []byte, count uint64) ([]shardnode.Item, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", ctx, h, prefix, id, count)
	ret0, _ := ret[0].([]shardnode.Item)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItem indicates an expected call of ListItem.
func (mr *MockSpaceShardHandlerMockRecorder) ListItem(ctx, h, prefix, id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).ListItem), ctx, h, prefix, id, count)
}

// Stats mocks base method.
func (m *MockSpaceShardHandler) Stats() ShardStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(ShardStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockSpaceShardHandlerMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockSpaceShardHandler)(nil).Stats))
}

// Update mocks base method.
func (m *MockSpaceShardHandler) Update(ctx context.Context, h OpHeader, kv *KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, h, kv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpaceShardHandlerMockRecorder) Update(ctx, h, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpaceShardHandler)(nil).Update), ctx, h, kv)
}

// UpdateItem mocks base method.
func (m *MockSpaceShardHandler) UpdateItem(ctx context.Context, h OpHeader, i shardnode.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, h, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockSpaceShardHandlerMockRecorder) UpdateItem(ctx, h, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockSpaceShardHandler)(nil).UpdateItem), ctx, h, i)
}
