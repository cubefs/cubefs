// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/clustermgr/diskmgr (interfaces: NodeManagerAPI)

// Package volumemgr is a generated GoMock package.
package volumemgr

import (
	context "context"
	reflect "reflect"

	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	diskmgr "github.com/cubefs/cubefs/blobstore/clustermgr/cluster"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockDiskMgrAPI is a mock of NodeManagerAPI interface.
type MockDiskMgrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDiskMgrAPIMockRecorder
}

// MockDiskMgrAPIMockRecorder is the mock recorder for MockDiskMgrAPI.
type MockDiskMgrAPIMockRecorder struct {
	mock *MockDiskMgrAPI
}

// NewMockDiskMgrAPI creates a new mock instance.
func NewMockDiskMgrAPI(ctrl *gomock.Controller) *MockDiskMgrAPI {
	mock := &MockDiskMgrAPI{ctrl: ctrl}
	mock.recorder = &MockDiskMgrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskMgrAPI) EXPECT() *MockDiskMgrAPIMockRecorder {
	return m.recorder
}

// AllocChunks mocks base method.
func (m *MockDiskMgrAPI) AllocChunks(arg0 context.Context, arg1 diskmgr.AllocPolicy) ([]proto.DiskID, []proto.Vuid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocChunks", arg0, arg1)
	ret0, _ := ret[0].([]proto.DiskID)
	ret1, _ := ret[1].([]proto.Vuid)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocChunks indicates an expected call of AllocChunks.
func (mr *MockDiskMgrAPIMockRecorder) AllocChunks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocChunks", reflect.TypeOf((*MockDiskMgrAPI)(nil).AllocChunks), arg0, arg1)
}

// AllocDiskID mocks base method.
func (m *MockDiskMgrAPI) AllocDiskID(arg0 context.Context) (proto.DiskID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocDiskID", arg0)
	ret0, _ := ret[0].(proto.DiskID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocDiskID indicates an expected call of AllocDiskID.
func (mr *MockDiskMgrAPIMockRecorder) AllocDiskID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocDiskID", reflect.TypeOf((*MockDiskMgrAPI)(nil).AllocDiskID), arg0)
}

// CheckDiskInfoDuplicated mocks base method.
func (m *MockDiskMgrAPI) CheckDiskInfoDuplicated(arg0 context.Context, arg1 *clustermgr.DiskInfo, arg2 *clustermgr.NodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDiskInfoDuplicated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDiskInfoDuplicated indicates an expected call of CheckDiskInfoDuplicated.
func (mr *MockDiskMgrAPIMockRecorder) CheckDiskInfoDuplicated(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDiskInfoDuplicated", reflect.TypeOf((*MockDiskMgrAPI)(nil).CheckDiskInfoDuplicated), arg0, arg1, arg2)
}

// GetDiskInfo mocks base method.
func (m *MockDiskMgrAPI) GetDiskInfo(arg0 context.Context, arg1 proto.DiskID) (*clustermgr.DiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.DiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskInfo indicates an expected call of GetDiskInfo.
func (mr *MockDiskMgrAPIMockRecorder) GetDiskInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskInfo", reflect.TypeOf((*MockDiskMgrAPI)(nil).GetDiskInfo), arg0, arg1)
}

// GetHeartbeatChangeDisks mocks base method.
func (m *MockDiskMgrAPI) GetHeartbeatChangeDisks() []diskmgr.HeartbeatEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeartbeatChangeDisks")
	ret0, _ := ret[0].([]diskmgr.HeartbeatEvent)
	return ret0
}

// GetHeartbeatChangeDisks indicates an expected call of GetHeartbeatChangeDisks.
func (mr *MockDiskMgrAPIMockRecorder) GetHeartbeatChangeDisks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeartbeatChangeDisks", reflect.TypeOf((*MockDiskMgrAPI)(nil).GetHeartbeatChangeDisks))
}

// IsDiskWritable mocks base method.
func (m *MockDiskMgrAPI) IsDiskWritable(arg0 context.Context, arg1 proto.DiskID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDiskWritable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDiskWritable indicates an expected call of IsDiskWritable.
func (mr *MockDiskMgrAPIMockRecorder) IsDiskWritable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDiskWritable", reflect.TypeOf((*MockDiskMgrAPI)(nil).IsDiskWritable), arg0, arg1)
}

// IsDroppingDisk mocks base method.
func (m *MockDiskMgrAPI) IsDroppingDisk(arg0 context.Context, arg1 proto.DiskID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDroppingDisk", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDroppingDisk indicates an expected call of IsDroppingDisk.
func (mr *MockDiskMgrAPIMockRecorder) IsDroppingDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDroppingDisk", reflect.TypeOf((*MockDiskMgrAPI)(nil).IsDroppingDisk), arg0, arg1)
}

// ListDiskInfo mocks base method.
func (m *MockDiskMgrAPI) ListDiskInfo(arg0 context.Context, arg1 *clustermgr.ListOptionArgs) (*clustermgr.ListDiskRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiskInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.ListDiskRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiskInfo indicates an expected call of ListDiskInfo.
func (mr *MockDiskMgrAPIMockRecorder) ListDiskInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiskInfo", reflect.TypeOf((*MockDiskMgrAPI)(nil).ListDiskInfo), arg0, arg1)
}

// ListDroppingDisk mocks base method.
func (m *MockDiskMgrAPI) ListDroppingDisk(arg0 context.Context) ([]*clustermgr.DiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDroppingDisk", arg0)
	ret0, _ := ret[0].([]*clustermgr.DiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDroppingDisk indicates an expected call of ListDroppingDisk.
func (mr *MockDiskMgrAPIMockRecorder) ListDroppingDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDroppingDisk", reflect.TypeOf((*MockDiskMgrAPI)(nil).ListDroppingDisk), arg0)
}

// SetStatus mocks base method.
func (m *MockDiskMgrAPI) SetStatus(arg0 context.Context, arg1 proto.DiskID, arg2 proto.DiskStatus, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDiskMgrAPIMockRecorder) SetStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDiskMgrAPI)(nil).SetStatus), arg0, arg1, arg2, arg3)
}

// Stat mocks base method.
func (m *MockDiskMgrAPI) Stat(arg0 context.Context) *clustermgr.SpaceStatInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(*clustermgr.SpaceStatInfo)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockDiskMgrAPIMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockDiskMgrAPI)(nil).Stat), arg0)
}

// SwitchReadonly mocks base method.
func (m *MockDiskMgrAPI) SwitchReadonly(arg0 proto.DiskID, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchReadonly", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchReadonly indicates an expected call of SwitchReadonly.
func (mr *MockDiskMgrAPIMockRecorder) SwitchReadonly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchReadonly", reflect.TypeOf((*MockDiskMgrAPI)(nil).SwitchReadonly), arg0, arg1)
}
