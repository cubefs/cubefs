// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/common/raft (interfaces: Group)

// Package raft is a generated GoMock package.
package raft

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// Campaign mocks base method.
func (m *MockGroup) Campaign(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Campaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Campaign indicates an expected call of Campaign.
func (mr *MockGroupMockRecorder) Campaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockGroup)(nil).Campaign), arg0)
}

// Clear mocks base method.
func (m *MockGroup) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockGroupMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockGroup)(nil).Clear))
}

// Close mocks base method.
func (m *MockGroup) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGroupMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGroup)(nil).Close))
}

// LeaderTransfer mocks base method.
func (m *MockGroup) LeaderTransfer(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderTransfer indicates an expected call of LeaderTransfer.
func (mr *MockGroupMockRecorder) LeaderTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderTransfer", reflect.TypeOf((*MockGroup)(nil).LeaderTransfer), arg0, arg1)
}

// MemberChange mocks base method.
func (m *MockGroup) MemberChange(arg0 context.Context, arg1 *Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberChange indicates an expected call of MemberChange.
func (mr *MockGroupMockRecorder) MemberChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberChange", reflect.TypeOf((*MockGroup)(nil).MemberChange), arg0, arg1)
}

// Propose mocks base method.
func (m *MockGroup) Propose(arg0 context.Context, arg1 *ProposalData) (ProposalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", arg0, arg1)
	ret0, _ := ret[0].(ProposalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Propose indicates an expected call of Propose.
func (mr *MockGroupMockRecorder) Propose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockGroup)(nil).Propose), arg0, arg1)
}

// ReadIndex mocks base method.
func (m *MockGroup) ReadIndex(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadIndex indicates an expected call of ReadIndex.
func (mr *MockGroupMockRecorder) ReadIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIndex", reflect.TypeOf((*MockGroup)(nil).ReadIndex), arg0)
}

// Stat mocks base method.
func (m *MockGroup) Stat() (*Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(*Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockGroupMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockGroup)(nil).Stat))
}

// Truncate mocks base method.
func (m *MockGroup) Truncate(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockGroupMockRecorder) Truncate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockGroup)(nil).Truncate), arg0, arg1)
}
