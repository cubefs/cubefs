// Code generated by MockGen. DO NOT EDIT.
// Source: proto.go

// Package raft is a generated GoMock package.
package raft

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStateMachine is a mock of StateMachine interface.
type MockStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockStateMachineMockRecorder
}

// MockStateMachineMockRecorder is the mock recorder for MockStateMachine.
type MockStateMachineMockRecorder struct {
	mock *MockStateMachine
}

// NewMockStateMachine creates a new mock instance.
func NewMockStateMachine(ctrl *gomock.Controller) *MockStateMachine {
	mock := &MockStateMachine{ctrl: ctrl}
	mock.recorder = &MockStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateMachine) EXPECT() *MockStateMachineMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockStateMachine) Apply(cxt context.Context, pd []ProposalData, index uint64) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", cxt, pd, index)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockStateMachineMockRecorder) Apply(cxt, pd, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStateMachine)(nil).Apply), cxt, pd, index)
}

// ApplyMemberChange mocks base method.
func (m *MockStateMachine) ApplyMemberChange(cc *Member, index uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMemberChange", cc, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyMemberChange indicates an expected call of ApplyMemberChange.
func (mr *MockStateMachineMockRecorder) ApplyMemberChange(cc, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMemberChange", reflect.TypeOf((*MockStateMachine)(nil).ApplyMemberChange), cc, index)
}

// ApplySnapshot mocks base method.
func (m *MockStateMachine) ApplySnapshot(s Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockStateMachineMockRecorder) ApplySnapshot(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockStateMachine)(nil).ApplySnapshot), s)
}

// LeaderChange mocks base method.
func (m *MockStateMachine) LeaderChange(peerID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderChange", peerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderChange indicates an expected call of LeaderChange.
func (mr *MockStateMachineMockRecorder) LeaderChange(peerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderChange", reflect.TypeOf((*MockStateMachine)(nil).LeaderChange), peerID)
}

// Snapshot mocks base method.
func (m *MockStateMachine) Snapshot() Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(Snapshot)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateMachineMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateMachine)(nil).Snapshot))
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorage) Get(key []byte) (ValGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(ValGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), key)
}

// Iter mocks base method.
func (m *MockStorage) Iter(prefix []byte) Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter", prefix)
	ret0, _ := ret[0].(Iterator)
	return ret0
}

// Iter indicates an expected call of Iter.
func (mr *MockStorageMockRecorder) Iter(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockStorage)(nil).Iter), prefix)
}

// NewBatch mocks base method.
func (m *MockStorage) NewBatch() Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockStorageMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockStorage)(nil).NewBatch))
}

// Write mocks base method.
func (m *MockStorage) Write(b Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStorageMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), b)
}

// MockSnapshot is a mock of Snapshot interface.
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot.
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance.
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSnapshot) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSnapshotMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSnapshot)(nil).Close))
}

// Index mocks base method.
func (m *MockSnapshot) Index() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockSnapshotMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockSnapshot)(nil).Index))
}

// ReadBatch mocks base method.
func (m *MockSnapshot) ReadBatch() (Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBatch")
	ret0, _ := ret[0].(Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBatch indicates an expected call of ReadBatch.
func (mr *MockSnapshotMockRecorder) ReadBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBatch", reflect.TypeOf((*MockSnapshot)(nil).ReadBatch))
}

// MockAddressResolver is a mock of AddressResolver interface.
type MockAddressResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAddressResolverMockRecorder
}

// MockAddressResolverMockRecorder is the mock recorder for MockAddressResolver.
type MockAddressResolverMockRecorder struct {
	mock *MockAddressResolver
}

// NewMockAddressResolver creates a new mock instance.
func NewMockAddressResolver(ctrl *gomock.Controller) *MockAddressResolver {
	mock := &MockAddressResolver{ctrl: ctrl}
	mock.recorder = &MockAddressResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressResolver) EXPECT() *MockAddressResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockAddressResolver) Resolve(ctx context.Context, nodeID uint64) (Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, nodeID)
	ret0, _ := ret[0].(Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockAddressResolverMockRecorder) Resolve(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockAddressResolver)(nil).Resolve), ctx, nodeID)
}

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}

// MockKeyGetter is a mock of KeyGetter interface.
type MockKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGetterMockRecorder
}

// MockKeyGetterMockRecorder is the mock recorder for MockKeyGetter.
type MockKeyGetterMockRecorder struct {
	mock *MockKeyGetter
}

// NewMockKeyGetter creates a new mock instance.
func NewMockKeyGetter(ctrl *gomock.Controller) *MockKeyGetter {
	mock := &MockKeyGetter{ctrl: ctrl}
	mock.recorder = &MockKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGetter) EXPECT() *MockKeyGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKeyGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyGetter)(nil).Close))
}

// Key mocks base method.
func (m *MockKeyGetter) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockKeyGetterMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyGetter)(nil).Key))
}

// MockValGetter is a mock of ValGetter interface.
type MockValGetter struct {
	ctrl     *gomock.Controller
	recorder *MockValGetterMockRecorder
}

// MockValGetterMockRecorder is the mock recorder for MockValGetter.
type MockValGetterMockRecorder struct {
	mock *MockValGetter
}

// NewMockValGetter creates a new mock instance.
func NewMockValGetter(ctrl *gomock.Controller) *MockValGetter {
	mock := &MockValGetter{ctrl: ctrl}
	mock.recorder = &MockValGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValGetter) EXPECT() *MockValGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValGetter)(nil).Close))
}

// Value mocks base method.
func (m *MockValGetter) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValGetterMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValGetter)(nil).Value))
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// ReadNext mocks base method.
func (m *MockIterator) ReadNext() (KeyGetter, ValGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNext")
	ret0, _ := ret[0].(KeyGetter)
	ret1, _ := ret[1].(ValGetter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNext indicates an expected call of ReadNext.
func (mr *MockIteratorMockRecorder) ReadNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNext", reflect.TypeOf((*MockIterator)(nil).ReadNext))
}

// ReadPrev mocks base method.
func (m *MockIterator) ReadPrev() (KeyGetter, ValGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrev")
	ret0, _ := ret[0].(KeyGetter)
	ret1, _ := ret[1].(ValGetter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPrev indicates an expected call of ReadPrev.
func (mr *MockIteratorMockRecorder) ReadPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrev", reflect.TypeOf((*MockIterator)(nil).ReadPrev))
}

// SeekForPrev mocks base method.
func (m *MockIterator) SeekForPrev(prev []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForPrev", prev)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForPrev indicates an expected call of SeekForPrev.
func (mr *MockIteratorMockRecorder) SeekForPrev(prev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForPrev", reflect.TypeOf((*MockIterator)(nil).SeekForPrev), prev)
}

// SeekTo mocks base method.
func (m *MockIterator) SeekTo(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekTo", key)
}

// SeekTo indicates an expected call of SeekTo.
func (mr *MockIteratorMockRecorder) SeekTo(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekTo", reflect.TypeOf((*MockIterator)(nil).SeekTo), key)
}

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBatch) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBatchMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBatch)(nil).Close))
}

// Data mocks base method.
func (m *MockBatch) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockBatchMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockBatch)(nil).Data))
}

// Delete mocks base method.
func (m *MockBatch) Delete(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockBatchMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatch)(nil).Delete), key)
}

// DeleteRange mocks base method.
func (m *MockBatch) DeleteRange(start, end []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRange", start, end)
}

// DeleteRange indicates an expected call of DeleteRange.
func (mr *MockBatchMockRecorder) DeleteRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockBatch)(nil).DeleteRange), start, end)
}

// From mocks base method.
func (m *MockBatch) From(data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "From", data)
}

// From indicates an expected call of From.
func (mr *MockBatchMockRecorder) From(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockBatch)(nil).From), data)
}

// Put mocks base method.
func (m *MockBatch) Put(key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockBatchMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBatch)(nil).Put), key, value)
}

// MockApplier is a mock of Applier interface.
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier.
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance.
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockApplier) Apply(cxt context.Context, pd ProposalData, index uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", cxt, pd, index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockApplierMockRecorder) Apply(cxt, pd, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockApplier)(nil).Apply), cxt, pd, index)
}

// LeaderChange mocks base method.
func (m *MockApplier) LeaderChange(leader uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderChange", leader)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderChange indicates an expected call of LeaderChange.
func (mr *MockApplierMockRecorder) LeaderChange(leader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderChange", reflect.TypeOf((*MockApplier)(nil).LeaderChange), leader)
}
