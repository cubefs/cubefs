// Code generated by MockGen. DO NOT EDIT.
// Source: ./kvstore.go

// Package kvstore is a generated GoMock package.
package kvstore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckColumns mocks base method.
func (m *MockStore) CheckColumns(col CF) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckColumns", col)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckColumns indicates an expected call of CheckColumns.
func (mr *MockStoreMockRecorder) CheckColumns(col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckColumns", reflect.TypeOf((*MockStore)(nil).CheckColumns), col)
}

// Close mocks base method.
func (m *MockStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateColumn mocks base method.
func (m *MockStore) CreateColumn(col CF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateColumn", col)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateColumn indicates an expected call of CreateColumn.
func (mr *MockStoreMockRecorder) CreateColumn(col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateColumn", reflect.TypeOf((*MockStore)(nil).CreateColumn), col)
}

// Delete mocks base method.
func (m *MockStore) Delete(ctx context.Context, col CF, key []byte, opts ...WriteOptFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(ctx, col, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), varargs...)
}

// DeleteRange mocks base method.
func (m *MockStore) DeleteRange(ctx context.Context, col CF, start, end []byte, opts ...WriteOptFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, start, end}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRange", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRange indicates an expected call of DeleteRange.
func (mr *MockStoreMockRecorder) DeleteRange(ctx, col, start, end interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, start, end}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockStore)(nil).DeleteRange), varargs...)
}

// FlushCF mocks base method.
func (m *MockStore) FlushCF(ctx context.Context, col CF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushCF", ctx, col)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushCF indicates an expected call of FlushCF.
func (mr *MockStoreMockRecorder) FlushCF(ctx, col interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushCF", reflect.TypeOf((*MockStore)(nil).FlushCF), ctx, col)
}

// Get mocks base method.
func (m *MockStore) Get(ctx context.Context, col CF, key []byte, opts ...ReadOptFunc) (ValueGetter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(ValueGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(ctx, col, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), varargs...)
}

// GetAllColumns mocks base method.
func (m *MockStore) GetAllColumns() []CF {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllColumns")
	ret0, _ := ret[0].([]CF)
	return ret0
}

// GetAllColumns indicates an expected call of GetAllColumns.
func (mr *MockStoreMockRecorder) GetAllColumns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllColumns", reflect.TypeOf((*MockStore)(nil).GetAllColumns))
}

// GetOptionHelper mocks base method.
func (m *MockStore) GetOptionHelper() OptionHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionHelper")
	ret0, _ := ret[0].(OptionHelper)
	return ret0
}

// GetOptionHelper indicates an expected call of GetOptionHelper.
func (mr *MockStoreMockRecorder) GetOptionHelper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionHelper", reflect.TypeOf((*MockStore)(nil).GetOptionHelper))
}

// GetRaw mocks base method.
func (m *MockStore) GetRaw(ctx context.Context, col CF, key []byte, opts ...ReadOptFunc) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRaw", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockStoreMockRecorder) GetRaw(ctx, col, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockStore)(nil).GetRaw), varargs...)
}

// List mocks base method.
func (m *MockStore) List(ctx context.Context, col CF, prefix, marker []byte, readOpt ReadOption) ListReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, col, prefix, marker, readOpt)
	ret0, _ := ret[0].(ListReader)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockStoreMockRecorder) List(ctx, col, prefix, marker, readOpt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), ctx, col, prefix, marker, readOpt)
}

// MultiGet mocks base method.
func (m *MockStore) MultiGet(ctx context.Context, col CF, keys [][]byte, opts ...ReadOptFunc) ([]ValueGetter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, keys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGet", varargs...)
	ret0, _ := ret[0].([]ValueGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGet indicates an expected call of MultiGet.
func (mr *MockStoreMockRecorder) MultiGet(ctx, col, keys interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, keys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGet", reflect.TypeOf((*MockStore)(nil).MultiGet), varargs...)
}

// NewReadOption mocks base method.
func (m *MockStore) NewReadOption() ReadOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReadOption")
	ret0, _ := ret[0].(ReadOption)
	return ret0
}

// NewReadOption indicates an expected call of NewReadOption.
func (mr *MockStoreMockRecorder) NewReadOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReadOption", reflect.TypeOf((*MockStore)(nil).NewReadOption))
}

// NewSnapshot mocks base method.
func (m *MockStore) NewSnapshot() Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSnapshot")
	ret0, _ := ret[0].(Snapshot)
	return ret0
}

// NewSnapshot indicates an expected call of NewSnapshot.
func (mr *MockStoreMockRecorder) NewSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSnapshot", reflect.TypeOf((*MockStore)(nil).NewSnapshot))
}

// NewWriteBatch mocks base method.
func (m *MockStore) NewWriteBatch() WriteBatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriteBatch")
	ret0, _ := ret[0].(WriteBatch)
	return ret0
}

// NewWriteBatch indicates an expected call of NewWriteBatch.
func (mr *MockStoreMockRecorder) NewWriteBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriteBatch", reflect.TypeOf((*MockStore)(nil).NewWriteBatch))
}

// NewWriteOption mocks base method.
func (m *MockStore) NewWriteOption() WriteOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriteOption")
	ret0, _ := ret[0].(WriteOption)
	return ret0
}

// NewWriteOption indicates an expected call of NewWriteOption.
func (mr *MockStoreMockRecorder) NewWriteOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriteOption", reflect.TypeOf((*MockStore)(nil).NewWriteOption))
}

// Read mocks base method.
func (m *MockStore) Read(ctx context.Context, cols []CF, keys [][]byte, opts ...ReadOptFunc) ([]ValueGetter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, cols, keys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].([]ValueGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStoreMockRecorder) Read(ctx, cols, keys interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, cols, keys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStore)(nil).Read), varargs...)
}

// SetRaw mocks base method.
func (m *MockStore) SetRaw(ctx context.Context, col CF, key, value []byte, opts ...WriteOptFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, col, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRaw", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRaw indicates an expected call of SetRaw.
func (mr *MockStoreMockRecorder) SetRaw(ctx, col, key, value interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, col, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRaw", reflect.TypeOf((*MockStore)(nil).SetRaw), varargs...)
}

// Stats mocks base method.
func (m *MockStore) Stats(ctx context.Context) (Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx)
	ret0, _ := ret[0].(Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockStoreMockRecorder) Stats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockStore)(nil).Stats), ctx)
}

// Write mocks base method.
func (m *MockStore) Write(ctx context.Context, batch WriteBatch, opts ...WriteOptFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, batch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStoreMockRecorder) Write(ctx, batch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, batch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStore)(nil).Write), varargs...)
}

// MockOptionHelper is a mock of OptionHelper interface.
type MockOptionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockOptionHelperMockRecorder
}

// MockOptionHelperMockRecorder is the mock recorder for MockOptionHelper.
type MockOptionHelperMockRecorder struct {
	mock *MockOptionHelper
}

// NewMockOptionHelper creates a new mock instance.
func NewMockOptionHelper(ctrl *gomock.Controller) *MockOptionHelper {
	mock := &MockOptionHelper{ctrl: ctrl}
	mock.recorder = &MockOptionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionHelper) EXPECT() *MockOptionHelperMockRecorder {
	return m.recorder
}

// GetOption mocks base method.
func (m *MockOptionHelper) GetOption() Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption")
	ret0, _ := ret[0].(Option)
	return ret0
}

// GetOption indicates an expected call of GetOption.
func (mr *MockOptionHelperMockRecorder) GetOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockOptionHelper)(nil).GetOption))
}

// SetArenaBlockSize mocks base method.
func (m *MockOptionHelper) SetArenaBlockSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArenaBlockSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArenaBlockSize indicates an expected call of SetArenaBlockSize.
func (mr *MockOptionHelperMockRecorder) SetArenaBlockSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArenaBlockSize", reflect.TypeOf((*MockOptionHelper)(nil).SetArenaBlockSize), size)
}

// SetBlockSize mocks base method.
func (m *MockOptionHelper) SetBlockSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBlockSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBlockSize indicates an expected call of SetBlockSize.
func (mr *MockOptionHelperMockRecorder) SetBlockSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockSize", reflect.TypeOf((*MockOptionHelper)(nil).SetBlockSize), size)
}

// SetFIFOCompactionAllow mocks base method.
func (m *MockOptionHelper) SetFIFOCompactionAllow(value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFIFOCompactionAllow", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFIFOCompactionAllow indicates an expected call of SetFIFOCompactionAllow.
func (mr *MockOptionHelperMockRecorder) SetFIFOCompactionAllow(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFIFOCompactionAllow", reflect.TypeOf((*MockOptionHelper)(nil).SetFIFOCompactionAllow), value)
}

// SetFIFOCompactionMaxTableFileSize mocks base method.
func (m *MockOptionHelper) SetFIFOCompactionMaxTableFileSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFIFOCompactionMaxTableFileSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFIFOCompactionMaxTableFileSize indicates an expected call of SetFIFOCompactionMaxTableFileSize.
func (mr *MockOptionHelperMockRecorder) SetFIFOCompactionMaxTableFileSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFIFOCompactionMaxTableFileSize", reflect.TypeOf((*MockOptionHelper)(nil).SetFIFOCompactionMaxTableFileSize), size)
}

// SetHardPendingCompactionBytesLimit mocks base method.
func (m *MockOptionHelper) SetHardPendingCompactionBytesLimit(value uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHardPendingCompactionBytesLimit", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHardPendingCompactionBytesLimit indicates an expected call of SetHardPendingCompactionBytesLimit.
func (mr *MockOptionHelperMockRecorder) SetHardPendingCompactionBytesLimit(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHardPendingCompactionBytesLimit", reflect.TypeOf((*MockOptionHelper)(nil).SetHardPendingCompactionBytesLimit), value)
}

// SetIOWriteRateLimiter mocks base method.
func (m *MockOptionHelper) SetIOWriteRateLimiter(value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOWriteRateLimiter", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOWriteRateLimiter indicates an expected call of SetIOWriteRateLimiter.
func (mr *MockOptionHelperMockRecorder) SetIOWriteRateLimiter(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOWriteRateLimiter", reflect.TypeOf((*MockOptionHelper)(nil).SetIOWriteRateLimiter), value)
}

// SetLevel0SlowdownWritesTrigger mocks base method.
func (m *MockOptionHelper) SetLevel0SlowdownWritesTrigger(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel0SlowdownWritesTrigger", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel0SlowdownWritesTrigger indicates an expected call of SetLevel0SlowdownWritesTrigger.
func (mr *MockOptionHelperMockRecorder) SetLevel0SlowdownWritesTrigger(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel0SlowdownWritesTrigger", reflect.TypeOf((*MockOptionHelper)(nil).SetLevel0SlowdownWritesTrigger), value)
}

// SetLevel0StopWritesTrigger mocks base method.
func (m *MockOptionHelper) SetLevel0StopWritesTrigger(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel0StopWritesTrigger", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLevel0StopWritesTrigger indicates an expected call of SetLevel0StopWritesTrigger.
func (mr *MockOptionHelperMockRecorder) SetLevel0StopWritesTrigger(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel0StopWritesTrigger", reflect.TypeOf((*MockOptionHelper)(nil).SetLevel0StopWritesTrigger), value)
}

// SetMaxBackgroundCompactions mocks base method.
func (m *MockOptionHelper) SetMaxBackgroundCompactions(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxBackgroundCompactions", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxBackgroundCompactions indicates an expected call of SetMaxBackgroundCompactions.
func (mr *MockOptionHelperMockRecorder) SetMaxBackgroundCompactions(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxBackgroundCompactions", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxBackgroundCompactions), value)
}

// SetMaxBackgroundJobs mocks base method.
func (m *MockOptionHelper) SetMaxBackgroundJobs(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxBackgroundJobs", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxBackgroundJobs indicates an expected call of SetMaxBackgroundJobs.
func (mr *MockOptionHelperMockRecorder) SetMaxBackgroundJobs(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxBackgroundJobs", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxBackgroundJobs), value)
}

// SetMaxBytesForLevelBase mocks base method.
func (m *MockOptionHelper) SetMaxBytesForLevelBase(value uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxBytesForLevelBase", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxBytesForLevelBase indicates an expected call of SetMaxBytesForLevelBase.
func (mr *MockOptionHelperMockRecorder) SetMaxBytesForLevelBase(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxBytesForLevelBase", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxBytesForLevelBase), value)
}

// SetMaxOpenFiles mocks base method.
func (m *MockOptionHelper) SetMaxOpenFiles(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxOpenFiles", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxOpenFiles indicates an expected call of SetMaxOpenFiles.
func (mr *MockOptionHelperMockRecorder) SetMaxOpenFiles(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenFiles", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxOpenFiles), value)
}

// SetMaxSubCompactions mocks base method.
func (m *MockOptionHelper) SetMaxSubCompactions(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxSubCompactions", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxSubCompactions indicates an expected call of SetMaxSubCompactions.
func (mr *MockOptionHelperMockRecorder) SetMaxSubCompactions(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxSubCompactions", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxSubCompactions), value)
}

// SetMaxWriteBufferNumber mocks base method.
func (m *MockOptionHelper) SetMaxWriteBufferNumber(value int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxWriteBufferNumber", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxWriteBufferNumber indicates an expected call of SetMaxWriteBufferNumber.
func (mr *MockOptionHelperMockRecorder) SetMaxWriteBufferNumber(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxWriteBufferNumber", reflect.TypeOf((*MockOptionHelper)(nil).SetMaxWriteBufferNumber), value)
}

// SetSoftPendingCompactionBytesLimit mocks base method.
func (m *MockOptionHelper) SetSoftPendingCompactionBytesLimit(value uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSoftPendingCompactionBytesLimit", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSoftPendingCompactionBytesLimit indicates an expected call of SetSoftPendingCompactionBytesLimit.
func (mr *MockOptionHelperMockRecorder) SetSoftPendingCompactionBytesLimit(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSoftPendingCompactionBytesLimit", reflect.TypeOf((*MockOptionHelper)(nil).SetSoftPendingCompactionBytesLimit), value)
}

// SetTargetFileSizeBase mocks base method.
func (m *MockOptionHelper) SetTargetFileSizeBase(value uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTargetFileSizeBase", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTargetFileSizeBase indicates an expected call of SetTargetFileSizeBase.
func (mr *MockOptionHelperMockRecorder) SetTargetFileSizeBase(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTargetFileSizeBase", reflect.TypeOf((*MockOptionHelper)(nil).SetTargetFileSizeBase), value)
}

// SetWriteBufferSize mocks base method.
func (m *MockOptionHelper) SetWriteBufferSize(size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteBufferSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteBufferSize indicates an expected call of SetWriteBufferSize.
func (mr *MockOptionHelperMockRecorder) SetWriteBufferSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteBufferSize", reflect.TypeOf((*MockOptionHelper)(nil).SetWriteBufferSize), size)
}

// MockReadOption is a mock of ReadOption interface.
type MockReadOption struct {
	ctrl     *gomock.Controller
	recorder *MockReadOptionMockRecorder
}

// MockReadOptionMockRecorder is the mock recorder for MockReadOption.
type MockReadOptionMockRecorder struct {
	mock *MockReadOption
}

// NewMockReadOption creates a new mock instance.
func NewMockReadOption(ctrl *gomock.Controller) *MockReadOption {
	mock := &MockReadOption{ctrl: ctrl}
	mock.recorder = &MockReadOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOption) EXPECT() *MockReadOptionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadOption) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockReadOptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadOption)(nil).Close))
}

// SetSnapShot mocks base method.
func (m *MockReadOption) SetSnapShot(snap Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSnapShot", snap)
}

// SetSnapShot indicates an expected call of SetSnapShot.
func (mr *MockReadOptionMockRecorder) SetSnapShot(snap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapShot", reflect.TypeOf((*MockReadOption)(nil).SetSnapShot), snap)
}

// MockWriteOption is a mock of WriteOption interface.
type MockWriteOption struct {
	ctrl     *gomock.Controller
	recorder *MockWriteOptionMockRecorder
}

// MockWriteOptionMockRecorder is the mock recorder for MockWriteOption.
type MockWriteOptionMockRecorder struct {
	mock *MockWriteOption
}

// NewMockWriteOption creates a new mock instance.
func NewMockWriteOption(ctrl *gomock.Controller) *MockWriteOption {
	mock := &MockWriteOption{ctrl: ctrl}
	mock.recorder = &MockWriteOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteOption) EXPECT() *MockWriteOptionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriteOption) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWriteOptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteOption)(nil).Close))
}

// DisableWAL mocks base method.
func (m *MockWriteOption) DisableWAL(value bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableWAL", value)
}

// DisableWAL indicates an expected call of DisableWAL.
func (mr *MockWriteOptionMockRecorder) DisableWAL(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWAL", reflect.TypeOf((*MockWriteOption)(nil).DisableWAL), value)
}

// SetSync mocks base method.
func (m *MockWriteOption) SetSync(value bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSync", value)
}

// SetSync indicates an expected call of SetSync.
func (mr *MockWriteOptionMockRecorder) SetSync(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSync", reflect.TypeOf((*MockWriteOption)(nil).SetSync), value)
}

// MockLruCache is a mock of LruCache interface.
type MockLruCache struct {
	ctrl     *gomock.Controller
	recorder *MockLruCacheMockRecorder
}

// MockLruCacheMockRecorder is the mock recorder for MockLruCache.
type MockLruCacheMockRecorder struct {
	mock *MockLruCache
}

// NewMockLruCache creates a new mock instance.
func NewMockLruCache(ctrl *gomock.Controller) *MockLruCache {
	mock := &MockLruCache{ctrl: ctrl}
	mock.recorder = &MockLruCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLruCache) EXPECT() *MockLruCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLruCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLruCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLruCache)(nil).Close))
}

// GetPinnedUsage mocks base method.
func (m *MockLruCache) GetPinnedUsage() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinnedUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPinnedUsage indicates an expected call of GetPinnedUsage.
func (mr *MockLruCacheMockRecorder) GetPinnedUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinnedUsage", reflect.TypeOf((*MockLruCache)(nil).GetPinnedUsage))
}

// GetUsage mocks base method.
func (m *MockLruCache) GetUsage() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockLruCacheMockRecorder) GetUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockLruCache)(nil).GetUsage))
}

// MockWriteBufferManager is a mock of WriteBufferManager interface.
type MockWriteBufferManager struct {
	ctrl     *gomock.Controller
	recorder *MockWriteBufferManagerMockRecorder
}

// MockWriteBufferManagerMockRecorder is the mock recorder for MockWriteBufferManager.
type MockWriteBufferManagerMockRecorder struct {
	mock *MockWriteBufferManager
}

// NewMockWriteBufferManager creates a new mock instance.
func NewMockWriteBufferManager(ctrl *gomock.Controller) *MockWriteBufferManager {
	mock := &MockWriteBufferManager{ctrl: ctrl}
	mock.recorder = &MockWriteBufferManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteBufferManager) EXPECT() *MockWriteBufferManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriteBufferManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWriteBufferManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteBufferManager)(nil).Close))
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRateLimiter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRateLimiterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRateLimiter)(nil).Close))
}

// SetBytesPerSec mocks base method.
func (m *MockRateLimiter) SetBytesPerSec(value int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBytesPerSec", value)
}

// SetBytesPerSec indicates an expected call of SetBytesPerSec.
func (mr *MockRateLimiterMockRecorder) SetBytesPerSec(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBytesPerSec", reflect.TypeOf((*MockRateLimiter)(nil).SetBytesPerSec), value)
}

// MockListReader is a mock of ListReader interface.
type MockListReader struct {
	ctrl     *gomock.Controller
	recorder *MockListReaderMockRecorder
}

// MockListReaderMockRecorder is the mock recorder for MockListReader.
type MockListReaderMockRecorder struct {
	mock *MockListReader
}

// NewMockListReader creates a new mock instance.
func NewMockListReader(ctrl *gomock.Controller) *MockListReader {
	mock := &MockListReader{ctrl: ctrl}
	mock.recorder = &MockListReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListReader) EXPECT() *MockListReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockListReader) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockListReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListReader)(nil).Close))
}

// ReadLast mocks base method.
func (m *MockListReader) ReadLast() (KeyGetter, ValueGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLast")
	ret0, _ := ret[0].(KeyGetter)
	ret1, _ := ret[1].(ValueGetter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadLast indicates an expected call of ReadLast.
func (mr *MockListReaderMockRecorder) ReadLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLast", reflect.TypeOf((*MockListReader)(nil).ReadLast))
}

// ReadNext mocks base method.
func (m *MockListReader) ReadNext() (KeyGetter, ValueGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNext")
	ret0, _ := ret[0].(KeyGetter)
	ret1, _ := ret[1].(ValueGetter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNext indicates an expected call of ReadNext.
func (mr *MockListReaderMockRecorder) ReadNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNext", reflect.TypeOf((*MockListReader)(nil).ReadNext))
}

// ReadNextCopy mocks base method.
func (m *MockListReader) ReadNextCopy() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNextCopy")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNextCopy indicates an expected call of ReadNextCopy.
func (mr *MockListReaderMockRecorder) ReadNextCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextCopy", reflect.TypeOf((*MockListReader)(nil).ReadNextCopy))
}

// ReadPrev mocks base method.
func (m *MockListReader) ReadPrev() (KeyGetter, ValueGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrev")
	ret0, _ := ret[0].(KeyGetter)
	ret1, _ := ret[1].(ValueGetter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPrev indicates an expected call of ReadPrev.
func (mr *MockListReaderMockRecorder) ReadPrev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrev", reflect.TypeOf((*MockListReader)(nil).ReadPrev))
}

// ReadPrevCopy mocks base method.
func (m *MockListReader) ReadPrevCopy() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrevCopy")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPrevCopy indicates an expected call of ReadPrevCopy.
func (mr *MockListReaderMockRecorder) ReadPrevCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrevCopy", reflect.TypeOf((*MockListReader)(nil).ReadPrevCopy))
}

// Seek mocks base method.
func (m *MockListReader) Seek(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Seek", key)
}

// Seek indicates an expected call of Seek.
func (mr *MockListReaderMockRecorder) Seek(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockListReader)(nil).Seek), key)
}

// SeekForPrev mocks base method.
func (m *MockListReader) SeekForPrev(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForPrev", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForPrev indicates an expected call of SeekForPrev.
func (mr *MockListReaderMockRecorder) SeekForPrev(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForPrev", reflect.TypeOf((*MockListReader)(nil).SeekForPrev), key)
}

// SeekToLast mocks base method.
func (m *MockListReader) SeekToLast() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekToLast")
}

// SeekToLast indicates an expected call of SeekToLast.
func (mr *MockListReaderMockRecorder) SeekToLast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekToLast", reflect.TypeOf((*MockListReader)(nil).SeekToLast))
}

// SetFilterKey mocks base method.
func (m *MockListReader) SetFilterKey(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFilterKey", key)
}

// SetFilterKey indicates an expected call of SetFilterKey.
func (mr *MockListReaderMockRecorder) SetFilterKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilterKey", reflect.TypeOf((*MockListReader)(nil).SetFilterKey), key)
}

// MockKeyGetter is a mock of KeyGetter interface.
type MockKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGetterMockRecorder
}

// MockKeyGetterMockRecorder is the mock recorder for MockKeyGetter.
type MockKeyGetterMockRecorder struct {
	mock *MockKeyGetter
}

// NewMockKeyGetter creates a new mock instance.
func NewMockKeyGetter(ctrl *gomock.Controller) *MockKeyGetter {
	mock := &MockKeyGetter{ctrl: ctrl}
	mock.recorder = &MockKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGetter) EXPECT() *MockKeyGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKeyGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyGetter)(nil).Close))
}

// Key mocks base method.
func (m *MockKeyGetter) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockKeyGetterMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyGetter)(nil).Key))
}

// MockValueGetter is a mock of ValueGetter interface.
type MockValueGetter struct {
	ctrl     *gomock.Controller
	recorder *MockValueGetterMockRecorder
}

// MockValueGetterMockRecorder is the mock recorder for MockValueGetter.
type MockValueGetterMockRecorder struct {
	mock *MockValueGetter
}

// NewMockValueGetter creates a new mock instance.
func NewMockValueGetter(ctrl *gomock.Controller) *MockValueGetter {
	mock := &MockValueGetter{ctrl: ctrl}
	mock.recorder = &MockValueGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueGetter) EXPECT() *MockValueGetterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValueGetter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValueGetterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValueGetter)(nil).Close))
}

// Read mocks base method.
func (m *MockValueGetter) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockValueGetterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockValueGetter)(nil).Read), arg0)
}

// Size mocks base method.
func (m *MockValueGetter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockValueGetterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockValueGetter)(nil).Size))
}

// Value mocks base method.
func (m *MockValueGetter) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValueGetterMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValueGetter)(nil).Value))
}

// MockSnapshot is a mock of Snapshot interface.
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot.
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance.
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSnapshot) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSnapshotMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSnapshot)(nil).Close))
}

// MockEnv is a mock of Env interface.
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv.
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance.
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEnv) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEnvMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEnv)(nil).Close))
}

// SetHighPriorityBackgroundThreads mocks base method.
func (m *MockEnv) SetHighPriorityBackgroundThreads(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHighPriorityBackgroundThreads", n)
}

// SetHighPriorityBackgroundThreads indicates an expected call of SetHighPriorityBackgroundThreads.
func (mr *MockEnvMockRecorder) SetHighPriorityBackgroundThreads(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHighPriorityBackgroundThreads", reflect.TypeOf((*MockEnv)(nil).SetHighPriorityBackgroundThreads), n)
}

// SetLowPriorityBackgroundThreads mocks base method.
func (m *MockEnv) SetLowPriorityBackgroundThreads(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLowPriorityBackgroundThreads", n)
}

// SetLowPriorityBackgroundThreads indicates an expected call of SetLowPriorityBackgroundThreads.
func (mr *MockEnvMockRecorder) SetLowPriorityBackgroundThreads(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLowPriorityBackgroundThreads", reflect.TypeOf((*MockEnv)(nil).SetLowPriorityBackgroundThreads), n)
}

// MockSstFileManager is a mock of SstFileManager interface.
type MockSstFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockSstFileManagerMockRecorder
}

// MockSstFileManagerMockRecorder is the mock recorder for MockSstFileManager.
type MockSstFileManagerMockRecorder struct {
	mock *MockSstFileManager
}

// NewMockSstFileManager creates a new mock instance.
func NewMockSstFileManager(ctrl *gomock.Controller) *MockSstFileManager {
	mock := &MockSstFileManager{ctrl: ctrl}
	mock.recorder = &MockSstFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSstFileManager) EXPECT() *MockSstFileManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSstFileManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSstFileManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSstFileManager)(nil).Close))
}

// MockWriteBatch is a mock of WriteBatch interface.
type MockWriteBatch struct {
	ctrl     *gomock.Controller
	recorder *MockWriteBatchMockRecorder
}

// MockWriteBatchMockRecorder is the mock recorder for MockWriteBatch.
type MockWriteBatchMockRecorder struct {
	mock *MockWriteBatch
}

// NewMockWriteBatch creates a new mock instance.
func NewMockWriteBatch(ctrl *gomock.Controller) *MockWriteBatch {
	mock := &MockWriteBatch{ctrl: ctrl}
	mock.recorder = &MockWriteBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteBatch) EXPECT() *MockWriteBatchMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockWriteBatch) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockWriteBatchMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockWriteBatch)(nil).Clear))
}

// Close mocks base method.
func (m *MockWriteBatch) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWriteBatchMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteBatch)(nil).Close))
}

// Count mocks base method.
func (m *MockWriteBatch) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockWriteBatchMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockWriteBatch)(nil).Count))
}

// Data mocks base method.
func (m *MockWriteBatch) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockWriteBatchMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockWriteBatch)(nil).Data))
}

// Delete mocks base method.
func (m *MockWriteBatch) Delete(col CF, key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", col, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockWriteBatchMockRecorder) Delete(col, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriteBatch)(nil).Delete), col, key)
}

// DeleteRange mocks base method.
func (m *MockWriteBatch) DeleteRange(col CF, startKey, endKey []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRange", col, startKey, endKey)
}

// DeleteRange indicates an expected call of DeleteRange.
func (mr *MockWriteBatchMockRecorder) DeleteRange(col, startKey, endKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockWriteBatch)(nil).DeleteRange), col, startKey, endKey)
}

// From mocks base method.
func (m *MockWriteBatch) From(data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "From", data)
}

// From indicates an expected call of From.
func (mr *MockWriteBatchMockRecorder) From(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockWriteBatch)(nil).From), data)
}

// Put mocks base method.
func (m *MockWriteBatch) Put(col CF, key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", col, key, value)
}

// Put indicates an expected call of Put.
func (mr *MockWriteBatchMockRecorder) Put(col, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockWriteBatch)(nil).Put), col, key, value)
}
