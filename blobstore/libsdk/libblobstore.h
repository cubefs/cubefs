/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "blobstore.go"

#include <stdlib.h> // malloc, free
#include <string.h> // memcpy
#include <stdint.h>

#include "blobstore_types.h"
#include "blobstore_errno.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// new_blobstore_handle creates a new BlobStore handle based on the provided configuration file path.
//
// Parameters:
//   - conf_path: A null-terminated C string representing the path to the configuration file.
//     The file should exist and contain valid JSON data required to initialize the BlobStore client.
//   - error_code: Optional pointer where the result of this function will be stored.
//     If not NULL, it will be set to 0 on success,
//     or a negative integer representing an error code on failure.
//
// Returns:
//   - On success, returns a valid non-zero BlobStoreHandle.
//   - On failure, returns 0. If error_code is not NULL, it will be set to a negative error code.
//
// Notes:
//   - The caller must call free_blobstore_handle() to release the returned handle and associated resources.
//   - If error_code is NULL, no detailed error information will be returned, but the function will still return 0 on failure.
//
extern BlobStoreHandle new_blobstore_handle(char* conf_path, int* error_code);

// free_blobstore_handle releases the resources associated with a BlobStoreHandle and sets it to invalid.
//
// Parameters:
//   - handle: A pointer to a BlobStoreHandle. The function will release any associated resources
//     and set the handle to BLOBSTORE_INVALID_HANDLE.
//     If '*handle' is already BLOBSTORE_INVALID_HANDLE, this function does nothing.
//
// Notes:
//   - This function must be called when the handle is no longer needed to avoid resource leaks.
//   - This function is only suitable for releasing BlobStoreHandle returned by new_blobstore_handle,
//     and is not applicable for freeing data structures allocated on the C side
//
extern void free_blobstore_handle(BlobStoreHandle* handle);

// blobstore_put uploads data to the BlobStore and returns the location and hash sum map of the uploaded data.
//
// Parameters:
//   - handle: A valid BlobStoreHandle returned by new_blobstore_handle.
//   - put_args: A pointer to a BlobStorePutArgs structure containing the upload parameters.
//   - out_location: A pointer to a BlobStoreLocation pointer where the location of the uploaded data will be stored.
//     This memory must be freed using free_blobstore_location after use.
//   - out_hash_sum_map: A pointer to a BlobStoreHashSumMap pointer where the computed hash sums will be stored.
//     This memory must be freed using free_blobstore_hash_sum_map after use.
//
// Returns:
// - On success, BS_ERR_OK is returned, and out_location and out_hash_sum_map are populated with valid pointers.
// - On failure, a negative integer representing an error code on failure.
//
// Notes:
// - The caller is responsible for freeing the resources associated with out_location and out_hash_sum_map using free_blobstore_location and free_blobstore_hash_sum_map, respectively.
// - The function assumes that the data buffer pointed to by put_args.data is accessible for the duration of the upload.
// - If an error occurs, any allocated resources for out_location and out_hash_sum_map will be cleaned up before returning the error code.
//
extern int blobstore_put(BlobStoreHandle handle, BlobStorePutArgs* put_args, BlobStoreLocation** out_location, BlobStoreHashSumMap** out_hash_sum_map);

// free_blobstore_hash_sum_map frees the memory allocated for a BlobStoreHashSumMap structure,
// including all associated BlobStoreHashEntry structures and their values.
//
// Parameters:
//   - hashSumMap: A pointer to a pointer (double pointer) to a BlobStoreHashSumMap structure.
//     The function will release the memory and set '*hashSumMap' to NULL.
//     If 'hashSumMap' or '*hashSumMap' is NULL, this function does nothing.
//
// Notes:
//   - This function is only suitable for releasing BlobStoreHashSumMap returned by blobstore_put,
//     and is not applicable for freeing data structures allocated on the C side
//
extern void free_blobstore_hash_sum_map(BlobStoreHashSumMap** hashSumMap);

// free_blobstore_location frees the memory allocated for a BlobStoreLocation structure,
// including all associated BlobStoreSliceInfo blobs if present.
//
// Parameters:
//   - location: A pointer to a pointer (double pointer) to a BlobStoreLocation structure.
//     The function will release the memory and set '*location' to NULL.
//     If 'location' or '*location' is NULL, this function does nothing.
//
// Notes:
//   - This function is only suitable for releasing BlobStoreLocation returned by blobstore_put,
//     and is not applicable for freeing data structures allocated on the C side
//   - For BlobStoreLocation within BlobStoreLocations, use free_blobstore_locations() instead.
//
extern void free_blobstore_location(BlobStoreLocation** location);

// blobstore_get retrieves data from the BlobStore based on the provided GetArgs.
//
// Parameters:
//   - handle: A valid BlobStoreHandle returned by new_blobstore_handle.
//   - get_args: A pointer to a BlobStoreGetArgs structure containing the get related parameters.
//
// Returns:
//   - On success, returns BS_ERR_OK (0).
//   - On failure, a negative integer representing an error code on failure.
//
// Notes:
//   - The caller must ensure that the data buffer pointed to by get_args.data is large enough to hold the requested amount of data.
//   - It's important to check the return value for errors and handle them appropriately.
//
extern int blobstore_get(BlobStoreHandle handle, BlobStoreGetArgs* get_args);

// blobstore_delete deletes the specified Locations and returns information about any failed deletions.
//
// Parameters:
//   - handle: A BlobStoreHandle representing the BlobStore instance. Must be non-zero and valid.
//   - deleteArgs: A pointer to a BlobStoreDeleteArgs structure containing the list of Locations(<=1024) to delete.
//   - result: A pointer to a BlobStoreLocations structure that will store information about failed deletions.
//     If no failures occur, `result` is set to NULL.
//
// Returns:
//   - On success, returns BS_ERR_OK (0).
//   - On failure, a negative integer representing an error code on failure.
//
// Notes:
//   - The caller is responsible for freeing the resources allocated for `result` using `free_blobstore_locations`.
//
extern int blobstore_delete(BlobStoreHandle handle, BlobStoreDeleteArgs* delete_args, BlobStoreLocations** result);

// free_blobstore_locations frees the memory allocated for a BlobStoreLocations structure,
// including all associated BlobStoreLocation entries if present.
//
// Parameters:
//   - result: A pointer to a pointer (double pointer) to a BlobStoreLocations structure.
//     The function will release the memory and set '*result' to NULL.
//     If 'result' or '*result' is NULL, this function does nothing.
//
// Notes:
//   - This function must be called to properly release resources after using a BlobStoreLocations.
//   - This function is only suitable for releasing BlobStoreLocations returned by blobstore_delete,
//     and is not applicable for freeing data structures allocated on the C side
//
extern void free_blobstore_locations(BlobStoreLocations** result);

#ifdef __cplusplus
}
#endif
