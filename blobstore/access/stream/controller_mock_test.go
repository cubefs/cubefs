// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/access/controller (interfaces: ClusterController,ServiceController,VolumeGetter,IShardController,Shard)

// Package stream is a generated GoMock package.
package stream

import (
	context "context"
	reflect "reflect"

	controller "github.com/cubefs/cubefs/blobstore/access/controller"
	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	shardnode "github.com/cubefs/cubefs/blobstore/api/shardnode"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	sharding "github.com/cubefs/cubefs/blobstore/common/sharding"
	gomock "github.com/golang/mock/gomock"
)

// MockClusterController is a mock of ClusterController interface.
type MockClusterController struct {
	ctrl     *gomock.Controller
	recorder *MockClusterControllerMockRecorder
}

// MockClusterControllerMockRecorder is the mock recorder for MockClusterController.
type MockClusterControllerMockRecorder struct {
	mock *MockClusterController
}

// NewMockClusterController creates a new mock instance.
func NewMockClusterController(ctrl *gomock.Controller) *MockClusterController {
	mock := &MockClusterController{ctrl: ctrl}
	mock.recorder = &MockClusterControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterController) EXPECT() *MockClusterControllerMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockClusterController) All() []*clustermgr.ClusterInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*clustermgr.ClusterInfo)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockClusterControllerMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockClusterController)(nil).All))
}

// ChangeChooseAlg mocks base method.
func (m *MockClusterController) ChangeChooseAlg(arg0 controller.AlgChoose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeChooseAlg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeChooseAlg indicates an expected call of ChangeChooseAlg.
func (mr *MockClusterControllerMockRecorder) ChangeChooseAlg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeChooseAlg", reflect.TypeOf((*MockClusterController)(nil).ChangeChooseAlg), arg0)
}

// ChooseOne mocks base method.
func (m *MockClusterController) ChooseOne() (*clustermgr.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseOne")
	ret0, _ := ret[0].(*clustermgr.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseOne indicates an expected call of ChooseOne.
func (mr *MockClusterControllerMockRecorder) ChooseOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseOne", reflect.TypeOf((*MockClusterController)(nil).ChooseOne))
}

// GetConfig mocks base method.
func (m *MockClusterController) GetConfig(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClusterControllerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClusterController)(nil).GetConfig), arg0, arg1)
}

// GetServiceController mocks base method.
func (m *MockClusterController) GetServiceController(arg0 proto.ClusterID) (controller.ServiceController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceController", arg0)
	ret0, _ := ret[0].(controller.ServiceController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceController indicates an expected call of GetServiceController.
func (mr *MockClusterControllerMockRecorder) GetServiceController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceController", reflect.TypeOf((*MockClusterController)(nil).GetServiceController), arg0)
}

// GetShardController mocks base method.
func (m *MockClusterController) GetShardController(arg0 proto.ClusterID) (controller.IShardController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardController", arg0)
	ret0, _ := ret[0].(controller.IShardController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardController indicates an expected call of GetShardController.
func (mr *MockClusterControllerMockRecorder) GetShardController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardController", reflect.TypeOf((*MockClusterController)(nil).GetShardController), arg0)
}

// GetVolumeGetter mocks base method.
func (m *MockClusterController) GetVolumeGetter(arg0 proto.ClusterID) (controller.VolumeGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGetter", arg0)
	ret0, _ := ret[0].(controller.VolumeGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGetter indicates an expected call of GetVolumeGetter.
func (mr *MockClusterControllerMockRecorder) GetVolumeGetter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGetter", reflect.TypeOf((*MockClusterController)(nil).GetVolumeGetter), arg0)
}

// Region mocks base method.
func (m *MockClusterController) Region() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Region")
	ret0, _ := ret[0].(string)
	return ret0
}

// Region indicates an expected call of Region.
func (mr *MockClusterControllerMockRecorder) Region() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Region", reflect.TypeOf((*MockClusterController)(nil).Region))
}

// MockServiceController is a mock of ServiceController interface.
type MockServiceController struct {
	ctrl     *gomock.Controller
	recorder *MockServiceControllerMockRecorder
}

// MockServiceControllerMockRecorder is the mock recorder for MockServiceController.
type MockServiceControllerMockRecorder struct {
	mock *MockServiceController
}

// NewMockServiceController creates a new mock instance.
func NewMockServiceController(ctrl *gomock.Controller) *MockServiceController {
	mock := &MockServiceController{ctrl: ctrl}
	mock.recorder = &MockServiceControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceController) EXPECT() *MockServiceControllerMockRecorder {
	return m.recorder
}

// GetDiskHost mocks base method.
func (m *MockServiceController) GetDiskHost(arg0 context.Context, arg1 proto.DiskID) (*controller.HostIDC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskHost", arg0, arg1)
	ret0, _ := ret[0].(*controller.HostIDC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskHost indicates an expected call of GetDiskHost.
func (mr *MockServiceControllerMockRecorder) GetDiskHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskHost", reflect.TypeOf((*MockServiceController)(nil).GetDiskHost), arg0, arg1)
}

// GetServiceHost mocks base method.
func (m *MockServiceController) GetServiceHost(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHost", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceHost indicates an expected call of GetServiceHost.
func (mr *MockServiceControllerMockRecorder) GetServiceHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHost", reflect.TypeOf((*MockServiceController)(nil).GetServiceHost), arg0, arg1)
}

// GetServiceHosts mocks base method.
func (m *MockServiceController) GetServiceHosts(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHosts", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceHosts indicates an expected call of GetServiceHosts.
func (mr *MockServiceControllerMockRecorder) GetServiceHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHosts", reflect.TypeOf((*MockServiceController)(nil).GetServiceHosts), arg0, arg1)
}

// GetShardnodeHost mocks base method.
func (m *MockServiceController) GetShardnodeHost(arg0 context.Context, arg1 proto.DiskID) (*controller.HostIDC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardnodeHost", arg0, arg1)
	ret0, _ := ret[0].(*controller.HostIDC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardnodeHost indicates an expected call of GetShardnodeHost.
func (mr *MockServiceControllerMockRecorder) GetShardnodeHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardnodeHost", reflect.TypeOf((*MockServiceController)(nil).GetShardnodeHost), arg0, arg1)
}

// PunishDisk mocks base method.
func (m *MockServiceController) PunishDisk(arg0 context.Context, arg1 proto.DiskID, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PunishDisk", arg0, arg1, arg2)
}

// PunishDisk indicates an expected call of PunishDisk.
func (mr *MockServiceControllerMockRecorder) PunishDisk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunishDisk", reflect.TypeOf((*MockServiceController)(nil).PunishDisk), arg0, arg1, arg2)
}

// PunishDiskWithThreshold mocks base method.
func (m *MockServiceController) PunishDiskWithThreshold(arg0 context.Context, arg1 proto.DiskID, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PunishDiskWithThreshold", arg0, arg1, arg2)
}

// PunishDiskWithThreshold indicates an expected call of PunishDiskWithThreshold.
func (mr *MockServiceControllerMockRecorder) PunishDiskWithThreshold(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunishDiskWithThreshold", reflect.TypeOf((*MockServiceController)(nil).PunishDiskWithThreshold), arg0, arg1, arg2)
}

// PunishService mocks base method.
func (m *MockServiceController) PunishService(arg0 context.Context, arg1, arg2 string, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PunishService", arg0, arg1, arg2, arg3)
}

// PunishService indicates an expected call of PunishService.
func (mr *MockServiceControllerMockRecorder) PunishService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunishService", reflect.TypeOf((*MockServiceController)(nil).PunishService), arg0, arg1, arg2, arg3)
}

// PunishServiceWithThreshold mocks base method.
func (m *MockServiceController) PunishServiceWithThreshold(arg0 context.Context, arg1, arg2 string, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PunishServiceWithThreshold", arg0, arg1, arg2, arg3)
}

// PunishServiceWithThreshold indicates an expected call of PunishServiceWithThreshold.
func (mr *MockServiceControllerMockRecorder) PunishServiceWithThreshold(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunishServiceWithThreshold", reflect.TypeOf((*MockServiceController)(nil).PunishServiceWithThreshold), arg0, arg1, arg2, arg3)
}

// PunishShardnode mocks base method.
func (m *MockServiceController) PunishShardnode(arg0 context.Context, arg1 proto.DiskID, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PunishShardnode", arg0, arg1, arg2)
}

// PunishShardnode indicates an expected call of PunishShardnode.
func (mr *MockServiceControllerMockRecorder) PunishShardnode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunishShardnode", reflect.TypeOf((*MockServiceController)(nil).PunishShardnode), arg0, arg1, arg2)
}

// MockVolumeGetter is a mock of VolumeGetter interface.
type MockVolumeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeGetterMockRecorder
}

// MockVolumeGetterMockRecorder is the mock recorder for MockVolumeGetter.
type MockVolumeGetterMockRecorder struct {
	mock *MockVolumeGetter
}

// NewMockVolumeGetter creates a new mock instance.
func NewMockVolumeGetter(ctrl *gomock.Controller) *MockVolumeGetter {
	mock := &MockVolumeGetter{ctrl: ctrl}
	mock.recorder = &MockVolumeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeGetter) EXPECT() *MockVolumeGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVolumeGetter) Get(arg0 context.Context, arg1 proto.Vid, arg2 bool) *controller.VolumePhy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*controller.VolumePhy)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockVolumeGetterMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVolumeGetter)(nil).Get), arg0, arg1, arg2)
}

// Punish mocks base method.
func (m *MockVolumeGetter) Punish(arg0 context.Context, arg1 proto.Vid, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Punish", arg0, arg1, arg2)
}

// Punish indicates an expected call of Punish.
func (mr *MockVolumeGetterMockRecorder) Punish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Punish", reflect.TypeOf((*MockVolumeGetter)(nil).Punish), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockVolumeGetter) Update(arg0 context.Context, arg1 proto.Vid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update.
func (mr *MockVolumeGetterMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVolumeGetter)(nil).Update), arg0, arg1)
}

// MockShardController is a mock of IShardController interface.
type MockShardController struct {
	ctrl     *gomock.Controller
	recorder *MockShardControllerMockRecorder
}

// MockShardControllerMockRecorder is the mock recorder for MockShardController.
type MockShardControllerMockRecorder struct {
	mock *MockShardController
}

// NewMockShardController creates a new mock instance.
func NewMockShardController(ctrl *gomock.Controller) *MockShardController {
	mock := &MockShardController{ctrl: ctrl}
	mock.recorder = &MockShardControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardController) EXPECT() *MockShardControllerMockRecorder {
	return m.recorder
}

// GetFisrtShard mocks base method.
func (m *MockShardController) GetFisrtShard(arg0 context.Context) (controller.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFisrtShard", arg0)
	ret0, _ := ret[0].(controller.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFisrtShard indicates an expected call of GetFisrtShard.
func (mr *MockShardControllerMockRecorder) GetFisrtShard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFisrtShard", reflect.TypeOf((*MockShardController)(nil).GetFisrtShard), arg0)
}

// GetNextShard mocks base method.
func (m *MockShardController) GetNextShard(arg0 context.Context, arg1 sharding.Range) (controller.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextShard", arg0, arg1)
	ret0, _ := ret[0].(controller.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextShard indicates an expected call of GetNextShard.
func (mr *MockShardControllerMockRecorder) GetNextShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextShard", reflect.TypeOf((*MockShardController)(nil).GetNextShard), arg0, arg1)
}

// GetShard mocks base method.
func (m *MockShardController) GetShard(arg0 context.Context, arg1 [][]byte) (controller.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", arg0, arg1)
	ret0, _ := ret[0].(controller.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockShardControllerMockRecorder) GetShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockShardController)(nil).GetShard), arg0, arg1)
}

// GetShardByID mocks base method.
func (m *MockShardController) GetShardByID(arg0 context.Context, arg1 proto.ShardID) (controller.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardByID", arg0, arg1)
	ret0, _ := ret[0].(controller.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardByID indicates an expected call of GetShardByID.
func (mr *MockShardControllerMockRecorder) GetShardByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardByID", reflect.TypeOf((*MockShardController)(nil).GetShardByID), arg0, arg1)
}

// GetShardByRange mocks base method.
func (m *MockShardController) GetShardByRange(arg0 context.Context, arg1 sharding.Range) (controller.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardByRange", arg0, arg1)
	ret0, _ := ret[0].(controller.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardByRange indicates an expected call of GetShardByRange.
func (mr *MockShardControllerMockRecorder) GetShardByRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardByRange", reflect.TypeOf((*MockShardController)(nil).GetShardByRange), arg0, arg1)
}

// GetSpaceID mocks base method.
func (m *MockShardController) GetSpaceID() proto.SpaceID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceID")
	ret0, _ := ret[0].(proto.SpaceID)
	return ret0
}

// GetSpaceID indicates an expected call of GetSpaceID.
func (mr *MockShardControllerMockRecorder) GetSpaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceID", reflect.TypeOf((*MockShardController)(nil).GetSpaceID))
}

// UpdateRoute mocks base method.
func (m *MockShardController) UpdateRoute(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockShardControllerMockRecorder) UpdateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockShardController)(nil).UpdateRoute), arg0)
}

// UpdateShard mocks base method.
func (m *MockShardController) UpdateShard(arg0 context.Context, arg1 shardnode.ShardStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShard indicates an expected call of UpdateShard.
func (mr *MockShardControllerMockRecorder) UpdateShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShard", reflect.TypeOf((*MockShardController)(nil).UpdateShard), arg0, arg1)
}

// MockShard is a mock of Shard interface.
type MockShard struct {
	ctrl     *gomock.Controller
	recorder *MockShardMockRecorder
}

// MockShardMockRecorder is the mock recorder for MockShard.
type MockShardMockRecorder struct {
	mock *MockShard
}

// NewMockShard creates a new mock instance.
func NewMockShard(ctrl *gomock.Controller) *MockShard {
	mock := &MockShard{ctrl: ctrl}
	mock.recorder = &MockShardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShard) EXPECT() *MockShardMockRecorder {
	return m.recorder
}

// GetRange mocks base method.
func (m *MockShard) GetRange() sharding.Range {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange")
	ret0, _ := ret[0].(sharding.Range)
	return ret0
}

// GetRange indicates an expected call of GetRange.
func (mr *MockShardMockRecorder) GetRange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockShard)(nil).GetRange))
}

// GetShardID mocks base method.
func (m *MockShard) GetShardID() proto.ShardID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardID")
	ret0, _ := ret[0].(proto.ShardID)
	return ret0
}

// GetShardID indicates an expected call of GetShardID.
func (mr *MockShardMockRecorder) GetShardID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardID", reflect.TypeOf((*MockShard)(nil).GetShardID))
}

// GetShardLeader mocks base method.
func (m *MockShard) GetShardLeader() controller.ShardOpInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardLeader")
	ret0, _ := ret[0].(controller.ShardOpInfo)
	return ret0
}

// GetShardLeader indicates an expected call of GetShardLeader.
func (mr *MockShardMockRecorder) GetShardLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardLeader", reflect.TypeOf((*MockShard)(nil).GetShardLeader))
}

// GetShardRandom mocks base method.
func (m *MockShard) GetShardRandom() controller.ShardOpInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardRandom")
	ret0, _ := ret[0].(controller.ShardOpInfo)
	return ret0
}

// GetShardRandom indicates an expected call of GetShardRandom.
func (mr *MockShardMockRecorder) GetShardRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardRandom", reflect.TypeOf((*MockShard)(nil).GetShardRandom))
}
