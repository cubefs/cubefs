// Code generated by MockGen. DO NOT EDIT.
// Source: ../../shardnode/blobdeleter/blob_deleter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	storage "github.com/cubefs/cubefs/blobstore/shardnode/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockDelMgrShardGetter is a mock of ShardGetter interface.
type MockDelMgrShardGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDelMgrShardGetterMockRecorder
}

// MockDelMgrShardGetterMockRecorder is the mock recorder for MockDelMgrShardGetter.
type MockDelMgrShardGetterMockRecorder struct {
	mock *MockDelMgrShardGetter
}

// NewMockDelMgrShardGetter creates a new mock instance.
func NewMockDelMgrShardGetter(ctrl *gomock.Controller) *MockDelMgrShardGetter {
	mock := &MockDelMgrShardGetter{ctrl: ctrl}
	mock.recorder = &MockDelMgrShardGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelMgrShardGetter) EXPECT() *MockDelMgrShardGetterMockRecorder {
	return m.recorder
}

// GetAllShards mocks base method.
func (m *MockDelMgrShardGetter) GetAllShards() []storage.ShardHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShards")
	ret0, _ := ret[0].([]storage.ShardHandler)
	return ret0
}

// GetAllShards indicates an expected call of GetAllShards.
func (mr *MockDelMgrShardGetterMockRecorder) GetAllShards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShards", reflect.TypeOf((*MockDelMgrShardGetter)(nil).GetAllShards))
}

// GetShard mocks base method.
func (m *MockDelMgrShardGetter) GetShard(diskID proto.DiskID, suid proto.Suid) (storage.ShardHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", diskID, suid)
	ret0, _ := ret[0].(storage.ShardHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockDelMgrShardGetterMockRecorder) GetShard(diskID, suid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockDelMgrShardGetter)(nil).GetShard), diskID, suid)
}
