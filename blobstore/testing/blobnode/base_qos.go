// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/blobnode/base/qos (interfaces: QosAPI)

// Package blobnode is a generated GoMock package.
package blobnode

import (
	context "context"
	io "io"
	reflect "reflect"

	blobnode "github.com/cubefs/cubefs/blobstore/api/blobnode"
	qos "github.com/cubefs/cubefs/blobstore/blobnode/base/qos"
	gomock "github.com/golang/mock/gomock"
)

// MockQosAPI is a mock of QosAPI interface.
type MockQosAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQosAPIMockRecorder
}

// MockQosAPIMockRecorder is the mock recorder for MockQosAPI.
type MockQosAPIMockRecorder struct {
	mock *MockQosAPI
}

// NewMockQosAPI creates a new mock instance.
func NewMockQosAPI(ctrl *gomock.Controller) *MockQosAPI {
	mock := &MockQosAPI{ctrl: ctrl}
	mock.recorder = &MockQosAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQosAPI) EXPECT() *MockQosAPIMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockQosAPI) Acquire() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockQosAPIMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockQosAPI)(nil).Acquire))
}

// AcquireBid mocks base method.
func (m *MockQosAPI) AcquireBid(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireBid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireBid indicates an expected call of AcquireBid.
func (mr *MockQosAPIMockRecorder) AcquireBid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireBid", reflect.TypeOf((*MockQosAPI)(nil).AcquireBid), arg0)
}

// Reader mocks base method.
func (m *MockQosAPI) Reader(arg0 context.Context, arg1 io.Reader) io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Reader indicates an expected call of Reader.
func (mr *MockQosAPIMockRecorder) Reader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockQosAPI)(nil).Reader), arg0, arg1)
}

// ReaderAt mocks base method.
func (m *MockQosAPI) ReaderAt(arg0 context.Context, arg1 io.ReaderAt) io.ReaderAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReaderAt", arg0, arg1)
	ret0, _ := ret[0].(io.ReaderAt)
	return ret0
}

// ReaderAt indicates an expected call of ReaderAt.
func (mr *MockQosAPIMockRecorder) ReaderAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReaderAt", reflect.TypeOf((*MockQosAPI)(nil).ReaderAt), arg0, arg1)
}

// Release mocks base method.
func (m *MockQosAPI) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockQosAPIMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockQosAPI)(nil).Release))
}

// ReleaseBid mocks base method.
func (m *MockQosAPI) ReleaseBid(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseBid", arg0)
}

// ReleaseBid indicates an expected call of ReleaseBid.
func (mr *MockQosAPIMockRecorder) ReleaseBid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseBid", reflect.TypeOf((*MockQosAPI)(nil).ReleaseBid), arg0)
}

// ResetQosLimit mocks base method.
func (m *MockQosAPI) ResetQosLimit(arg0 blobnode.IOType, arg1 qos.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetQosLimit", arg0, arg1)
}

// ResetQosLimit indicates an expected call of ResetQosLimit.
func (mr *MockQosAPIMockRecorder) ResetQosLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetQosLimit", reflect.TypeOf((*MockQosAPI)(nil).ResetQosLimit), arg0, arg1)
}

// Writer mocks base method.
func (m *MockQosAPI) Writer(arg0 context.Context, arg1 io.Writer) io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer", arg0, arg1)
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Writer indicates an expected call of Writer.
func (mr *MockQosAPIMockRecorder) Writer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockQosAPI)(nil).Writer), arg0, arg1)
}

// WriterAt mocks base method.
func (m *MockQosAPI) WriterAt(arg0 context.Context, arg1 io.WriterAt) io.WriterAt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriterAt", arg0, arg1)
	ret0, _ := ret[0].(io.WriterAt)
	return ret0
}

// WriterAt indicates an expected call of WriterAt.
func (mr *MockQosAPIMockRecorder) WriterAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriterAt", reflect.TypeOf((*MockQosAPI)(nil).WriterAt), arg0, arg1)
}
