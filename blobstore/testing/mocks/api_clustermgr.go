// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/api/clustermgr (interfaces: ClientAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	clustermgr "github.com/cubefs/cubefs/blobstore/api/clustermgr"
	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// AllocBid mocks base method.
func (m *MockClientAPI) AllocBid(arg0 context.Context, arg1 *clustermgr.BidScopeArgs) (*clustermgr.BidScopeRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocBid", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.BidScopeRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocBid indicates an expected call of AllocBid.
func (mr *MockClientAPIMockRecorder) AllocBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocBid", reflect.TypeOf((*MockClientAPI)(nil).AllocBid), arg0, arg1)
}

// AllocVolume mocks base method.
func (m *MockClientAPI) AllocVolume(arg0 context.Context, arg1 *clustermgr.AllocVolumeArgs) (clustermgr.AllocatedVolumeInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocVolume", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.AllocatedVolumeInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocVolume indicates an expected call of AllocVolume.
func (mr *MockClientAPIMockRecorder) AllocVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocVolume", reflect.TypeOf((*MockClientAPI)(nil).AllocVolume), arg0, arg1)
}

// DiskInfo mocks base method.
func (m *MockClientAPI) DiskInfo(arg0 context.Context, arg1 proto.DiskID) (*clustermgr.BlobNodeDiskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.BlobNodeDiskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskInfo indicates an expected call of DiskInfo.
func (mr *MockClientAPIMockRecorder) DiskInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskInfo", reflect.TypeOf((*MockClientAPI)(nil).DiskInfo), arg0, arg1)
}

// GetConfig mocks base method.
func (m *MockClientAPI) GetConfig(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientAPIMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClientAPI)(nil).GetConfig), arg0, arg1)
}

// GetService mocks base method.
func (m *MockClientAPI) GetService(arg0 context.Context, arg1 clustermgr.GetServiceArgs) (clustermgr.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockClientAPIMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClientAPI)(nil).GetService), arg0, arg1)
}

// GetVolumeInfo mocks base method.
func (m *MockClientAPI) GetVolumeInfo(arg0 context.Context, arg1 *clustermgr.GetVolumeArgs) (*clustermgr.VolumeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInfo", arg0, arg1)
	ret0, _ := ret[0].(*clustermgr.VolumeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInfo indicates an expected call of GetVolumeInfo.
func (mr *MockClientAPIMockRecorder) GetVolumeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInfo", reflect.TypeOf((*MockClientAPI)(nil).GetVolumeInfo), arg0, arg1)
}

// ListDisk mocks base method.
func (m *MockClientAPI) ListDisk(arg0 context.Context, arg1 *clustermgr.ListOptionArgs) (clustermgr.ListDiskRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisk", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.ListDiskRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisk indicates an expected call of ListDisk.
func (mr *MockClientAPIMockRecorder) ListDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisk", reflect.TypeOf((*MockClientAPI)(nil).ListDisk), arg0, arg1)
}

// RegisterService mocks base method.
func (m *MockClientAPI) RegisterService(arg0 context.Context, arg1 clustermgr.ServiceNode, arg2, arg3, arg4 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockClientAPIMockRecorder) RegisterService(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockClientAPI)(nil).RegisterService), arg0, arg1, arg2, arg3, arg4)
}

// RetainVolume mocks base method.
func (m *MockClientAPI) RetainVolume(arg0 context.Context, arg1 *clustermgr.RetainVolumeArgs) (clustermgr.RetainVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetainVolume", arg0, arg1)
	ret0, _ := ret[0].(clustermgr.RetainVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetainVolume indicates an expected call of RetainVolume.
func (mr *MockClientAPIMockRecorder) RetainVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainVolume", reflect.TypeOf((*MockClientAPI)(nil).RetainVolume), arg0, arg1)
}
