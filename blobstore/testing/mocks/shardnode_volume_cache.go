// Code generated by MockGen. DO NOT EDIT.
// Source: ../../shardnode/base/volume_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/cubefs/cubefs/blobstore/common/proto"
	proto0 "github.com/cubefs/cubefs/blobstore/shardnode/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockIVolumeCache is a mock of IVolumeCache interface.
type MockIVolumeCache struct {
	ctrl     *gomock.Controller
	recorder *MockIVolumeCacheMockRecorder
}

// MockIVolumeCacheMockRecorder is the mock recorder for MockIVolumeCache.
type MockIVolumeCacheMockRecorder struct {
	mock *MockIVolumeCache
}

// NewMockIVolumeCache creates a new mock instance.
func NewMockIVolumeCache(ctrl *gomock.Controller) *MockIVolumeCache {
	mock := &MockIVolumeCache{ctrl: ctrl}
	mock.recorder = &MockIVolumeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVolumeCache) EXPECT() *MockIVolumeCacheMockRecorder {
	return m.recorder
}

// DoubleCheckedRun mocks base method.
func (m *MockIVolumeCache) DoubleCheckedRun(ctx context.Context, vid proto.Vid, task func(*proto0.VolumeInfoSimple) (*proto0.VolumeInfoSimple, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubleCheckedRun", ctx, vid, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoubleCheckedRun indicates an expected call of DoubleCheckedRun.
func (mr *MockIVolumeCacheMockRecorder) DoubleCheckedRun(ctx, vid, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubleCheckedRun", reflect.TypeOf((*MockIVolumeCache)(nil).DoubleCheckedRun), ctx, vid, task)
}

// GetVolume mocks base method.
func (m *MockIVolumeCache) GetVolume(vid proto.Vid) (*proto0.VolumeInfoSimple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", vid)
	ret0, _ := ret[0].(*proto0.VolumeInfoSimple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockIVolumeCacheMockRecorder) GetVolume(vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockIVolumeCache)(nil).GetVolume), vid)
}

// LoadVolumes mocks base method.
func (m *MockIVolumeCache) LoadVolumes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadVolumes")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadVolumes indicates an expected call of LoadVolumes.
func (mr *MockIVolumeCacheMockRecorder) LoadVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVolumes", reflect.TypeOf((*MockIVolumeCache)(nil).LoadVolumes))
}

// UpdateVolume mocks base method.
func (m *MockIVolumeCache) UpdateVolume(vid proto.Vid) (*proto0.VolumeInfoSimple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", vid)
	ret0, _ := ret[0].(*proto0.VolumeInfoSimple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockIVolumeCacheMockRecorder) UpdateVolume(vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockIVolumeCache)(nil).UpdateVolume), vid)
}
