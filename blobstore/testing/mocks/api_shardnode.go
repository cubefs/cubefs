// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/api/shardnode (interfaces: AccessAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	shardnode "github.com/cubefs/cubefs/blobstore/api/shardnode"
	gomock "github.com/golang/mock/gomock"
)

// MockShardnodeAccess is a mock of AccessAPI interface.
type MockShardnodeAccess struct {
	ctrl     *gomock.Controller
	recorder *MockShardnodeAccessMockRecorder
}

// MockShardnodeAccessMockRecorder is the mock recorder for MockShardnodeAccess.
type MockShardnodeAccessMockRecorder struct {
	mock *MockShardnodeAccess
}

// NewMockShardnodeAccess creates a new mock instance.
func NewMockShardnodeAccess(ctrl *gomock.Controller) *MockShardnodeAccess {
	mock := &MockShardnodeAccess{ctrl: ctrl}
	mock.recorder = &MockShardnodeAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardnodeAccess) EXPECT() *MockShardnodeAccessMockRecorder {
	return m.recorder
}

// AllocSlice mocks base method.
func (m *MockShardnodeAccess) AllocSlice(arg0 context.Context, arg1 string, arg2 shardnode.AllocSliceArgs) (shardnode.AllocSliceRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocSlice", arg0, arg1, arg2)
	ret0, _ := ret[0].(shardnode.AllocSliceRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocSlice indicates an expected call of AllocSlice.
func (mr *MockShardnodeAccessMockRecorder) AllocSlice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocSlice", reflect.TypeOf((*MockShardnodeAccess)(nil).AllocSlice), arg0, arg1, arg2)
}

// CreateBlob mocks base method.
func (m *MockShardnodeAccess) CreateBlob(arg0 context.Context, arg1 string, arg2 shardnode.CreateBlobArgs) (shardnode.CreateBlobRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(shardnode.CreateBlobRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockShardnodeAccessMockRecorder) CreateBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockShardnodeAccess)(nil).CreateBlob), arg0, arg1, arg2)
}

// DeleteBlob mocks base method.
func (m *MockShardnodeAccess) DeleteBlob(arg0 context.Context, arg1 string, arg2 shardnode.DeleteBlobArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockShardnodeAccessMockRecorder) DeleteBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockShardnodeAccess)(nil).DeleteBlob), arg0, arg1, arg2)
}

// GetBlob mocks base method.
func (m *MockShardnodeAccess) GetBlob(arg0 context.Context, arg1 string, arg2 shardnode.GetBlobArgs) (shardnode.GetBlobRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(shardnode.GetBlobRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockShardnodeAccessMockRecorder) GetBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockShardnodeAccess)(nil).GetBlob), arg0, arg1, arg2)
}

// GetShardStats mocks base method.
func (m *MockShardnodeAccess) GetShardStats(arg0 context.Context, arg1 string, arg2 shardnode.GetShardArgs) (shardnode.ShardStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(shardnode.ShardStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardStats indicates an expected call of GetShardStats.
func (mr *MockShardnodeAccessMockRecorder) GetShardStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardStats", reflect.TypeOf((*MockShardnodeAccess)(nil).GetShardStats), arg0, arg1, arg2)
}

// ListBlob mocks base method.
func (m *MockShardnodeAccess) ListBlob(arg0 context.Context, arg1 string, arg2 shardnode.ListBlobArgs) (shardnode.ListBlobRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(shardnode.ListBlobRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlob indicates an expected call of ListBlob.
func (mr *MockShardnodeAccessMockRecorder) ListBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlob", reflect.TypeOf((*MockShardnodeAccess)(nil).ListBlob), arg0, arg1, arg2)
}

// SealBlob mocks base method.
func (m *MockShardnodeAccess) SealBlob(arg0 context.Context, arg1 string, arg2 shardnode.SealBlobArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SealBlob indicates an expected call of SealBlob.
func (mr *MockShardnodeAccessMockRecorder) SealBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealBlob", reflect.TypeOf((*MockShardnodeAccess)(nil).SealBlob), arg0, arg1, arg2)
}
