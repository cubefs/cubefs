// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/blobnode/core (interfaces: BlobFile)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	fs "io/fs"
	reflect "reflect"
	syscall "syscall"

	gomock "github.com/golang/mock/gomock"
)

// MockBlobFile is a mock of BlobFile interface.
type MockBlobFile struct {
	ctrl     *gomock.Controller
	recorder *MockBlobFileMockRecorder
}

// MockBlobFileMockRecorder is the mock recorder for MockBlobFile.
type MockBlobFileMockRecorder struct {
	mock *MockBlobFile
}

// NewMockBlobFile creates a new mock instance.
func NewMockBlobFile(ctrl *gomock.Controller) *MockBlobFile {
	mock := &MockBlobFile{ctrl: ctrl}
	mock.recorder = &MockBlobFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobFile) EXPECT() *MockBlobFileMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockBlobFile) Allocate(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockBlobFileMockRecorder) Allocate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockBlobFile)(nil).Allocate), arg0, arg1)
}

// Close mocks base method.
func (m *MockBlobFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlobFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlobFile)(nil).Close))
}

// Discard mocks base method.
func (m *MockBlobFile) Discard(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockBlobFileMockRecorder) Discard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockBlobFile)(nil).Discard), arg0, arg1)
}

// Fd mocks base method.
func (m *MockBlobFile) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockBlobFileMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockBlobFile)(nil).Fd))
}

// Name mocks base method.
func (m *MockBlobFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBlobFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBlobFile)(nil).Name))
}

// ReadAtCtx mocks base method.
func (m *MockBlobFile) ReadAtCtx(arg0 context.Context, arg1 []byte, arg2 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAtCtx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAtCtx indicates an expected call of ReadAtCtx.
func (mr *MockBlobFileMockRecorder) ReadAtCtx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAtCtx", reflect.TypeOf((*MockBlobFile)(nil).ReadAtCtx), arg0, arg1, arg2)
}

// Stat mocks base method.
func (m *MockBlobFile) Stat() (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockBlobFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockBlobFile)(nil).Stat))
}

// Sync mocks base method.
func (m *MockBlobFile) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockBlobFileMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBlobFile)(nil).Sync))
}

// SysStat mocks base method.
func (m *MockBlobFile) SysStat() (syscall.Stat_t, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysStat")
	ret0, _ := ret[0].(syscall.Stat_t)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SysStat indicates an expected call of SysStat.
func (mr *MockBlobFileMockRecorder) SysStat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysStat", reflect.TypeOf((*MockBlobFile)(nil).SysStat))
}

// WriteAtCtx mocks base method.
func (m *MockBlobFile) WriteAtCtx(arg0 context.Context, arg1 []byte, arg2 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAtCtx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAtCtx indicates an expected call of WriteAtCtx.
func (mr *MockBlobFileMockRecorder) WriteAtCtx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAtCtx", reflect.TypeOf((*MockBlobFile)(nil).WriteAtCtx), arg0, arg1, arg2)
}
