// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/proxy/mq (interfaces: BlobDeleteHandler,ShardRepairHandler,Producer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proxy "github.com/cubefs/cubefs/blobstore/api/proxy"
	gomock "github.com/golang/mock/gomock"
)

// MockBlobDeleteHandler is a mock of BlobDeleteHandler interface.
type MockBlobDeleteHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBlobDeleteHandlerMockRecorder
}

// MockBlobDeleteHandlerMockRecorder is the mock recorder for MockBlobDeleteHandler.
type MockBlobDeleteHandlerMockRecorder struct {
	mock *MockBlobDeleteHandler
}

// NewMockBlobDeleteHandler creates a new mock instance.
func NewMockBlobDeleteHandler(ctrl *gomock.Controller) *MockBlobDeleteHandler {
	mock := &MockBlobDeleteHandler{ctrl: ctrl}
	mock.recorder = &MockBlobDeleteHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobDeleteHandler) EXPECT() *MockBlobDeleteHandlerMockRecorder {
	return m.recorder
}

// SendDeleteMsg mocks base method.
func (m *MockBlobDeleteHandler) SendDeleteMsg(arg0 context.Context, arg1 *proxy.DeleteArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeleteMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeleteMsg indicates an expected call of SendDeleteMsg.
func (mr *MockBlobDeleteHandlerMockRecorder) SendDeleteMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeleteMsg", reflect.TypeOf((*MockBlobDeleteHandler)(nil).SendDeleteMsg), arg0, arg1)
}

// MockShardRepairHandler is a mock of ShardRepairHandler interface.
type MockShardRepairHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShardRepairHandlerMockRecorder
}

// MockShardRepairHandlerMockRecorder is the mock recorder for MockShardRepairHandler.
type MockShardRepairHandlerMockRecorder struct {
	mock *MockShardRepairHandler
}

// NewMockShardRepairHandler creates a new mock instance.
func NewMockShardRepairHandler(ctrl *gomock.Controller) *MockShardRepairHandler {
	mock := &MockShardRepairHandler{ctrl: ctrl}
	mock.recorder = &MockShardRepairHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardRepairHandler) EXPECT() *MockShardRepairHandlerMockRecorder {
	return m.recorder
}

// SendShardRepairMsg mocks base method.
func (m *MockShardRepairHandler) SendShardRepairMsg(arg0 context.Context, arg1 *proxy.ShardRepairArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendShardRepairMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendShardRepairMsg indicates an expected call of SendShardRepairMsg.
func (mr *MockShardRepairHandlerMockRecorder) SendShardRepairMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendShardRepairMsg", reflect.TypeOf((*MockShardRepairHandler)(nil).SendShardRepairMsg), arg0, arg1)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockProducer) SendMessage(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockProducerMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockProducer)(nil).SendMessage), arg0, arg1)
}

// SendMessages mocks base method.
func (m *MockProducer) SendMessages(arg0 string, arg1 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessages indicates an expected call of SendMessages.
func (mr *MockProducerMockRecorder) SendMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*MockProducer)(nil).SendMessages), arg0, arg1)
}
