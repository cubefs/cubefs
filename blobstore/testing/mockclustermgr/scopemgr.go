// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/blobstore/clustermgr/scopemgr (interfaces: ScopeMgrAPI)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScopeMgrAPI is a mock of ScopeMgrAPI interface.
type MockScopeMgrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMgrAPIMockRecorder
}

// MockScopeMgrAPIMockRecorder is the mock recorder for MockScopeMgrAPI.
type MockScopeMgrAPIMockRecorder struct {
	mock *MockScopeMgrAPI
}

// NewMockScopeMgrAPI creates a new mock instance.
func NewMockScopeMgrAPI(ctrl *gomock.Controller) *MockScopeMgrAPI {
	mock := &MockScopeMgrAPI{ctrl: ctrl}
	mock.recorder = &MockScopeMgrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeMgrAPI) EXPECT() *MockScopeMgrAPIMockRecorder {
	return m.recorder
}

// Alloc mocks base method.
func (m *MockScopeMgrAPI) Alloc(arg0 context.Context, arg1 string, arg2 int) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alloc", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Alloc indicates an expected call of Alloc.
func (mr *MockScopeMgrAPIMockRecorder) Alloc(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alloc", reflect.TypeOf((*MockScopeMgrAPI)(nil).Alloc), arg0, arg1, arg2)
}

// GetCurrent mocks base method.
func (m *MockScopeMgrAPI) GetCurrent(arg0 string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockScopeMgrAPIMockRecorder) GetCurrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockScopeMgrAPI)(nil).GetCurrent), arg0)
}
